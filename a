_G.UserConfig = {
    AppServerIP = "14.226.80.56",
    AppServerPort = 5000,
    UpdateInterval = 1,
    RetryAttempts = 3,
    RetryDelay = 10,
    AutoAcceptTimeout = 10,
    TradeWaitDelay = 2,
    TeleportOffset = 5,
    DefaultPlaceId = "126884695634066",
    TeleportCooldown = 15,
    MaxTeleportRetries = 3  -- New config for max retries on full server
}

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local GuiService = game:GetService("GuiService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local last_teleport_time = 0
local TELEPORT_COOLDOWN = _G.UserConfig.TeleportCooldown
local server_url = string.format("http://%s:%d", _G.UserConfig.AppServerIP, _G.UserConfig.AppServerPort)
local script_status = "Connecting..."
local is_fetching = false
local trade_status = "Idle"
local attempted_job_ids = {}  -- Track attempted Job IDs to avoid retrying the same one

-- GUI Setup
local function create_gui()
    local gui = Instance.new("ScreenGui")
    gui.Name = "PetTraderGui"
    gui.Parent = game.CoreGui
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 50)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = gui
    local status_label = Instance.new("TextLabel")
    status_label.Size = UDim2.new(1, 0, 1, 0)
    status_label.BackgroundTransparency = 1
    status_label.TextColor3 = Color3.fromRGB(255, 255, 255)
    status_label.Text = "Script: " .. script_status
    status_label.TextScaled = true
    status_label.Parent = frame
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    return status_label
end

local status_label = create_gui()

-- Logging Function
local function log_message(message, level)
    print(string.format("[LOG %s] %s", level:upper(), message))
    local text_color = Color3.fromRGB(255, 255, 255) -- White for info
    if level:lower() == "error" then
        text_color = Color3.fromRGB(255, 0, 0) -- Red for error
    elseif level:lower() == "success" then
        text_color = Color3.fromRGB(0, 255, 0) -- Green for success
    elseif level:lower() == "warning" then
        text_color = Color3.fromRGB(255, 165, 0) -- Orange for warning
    elseif level:lower() == "debug" then
        text_color = Color3.fromRGB(128, 128, 128) -- Gray for debug
    end
    status_label.TextColor3 = text_color
    status_label.Text = string.format("Script: %s", message)
end

-- HTTP Request Wrapper
local function http_request(method, endpoint, data)
    local success, response = pcall(function()
        local url = server_url .. endpoint
        local request_data = {
            Url = url,
            Method = method,
            Headers = { ["Content-Type"] = "application/json" }
        }
        if data then
            request_data.Body = HttpService:JSONEncode(data)
        end
        return HttpService:RequestAsync(request_data)
    end)
    if success and response.Success then
        return true, HttpService:JSONDecode(response.Body)
    else
        local error_msg = response and response.StatusMessage or "Unknown error"
        log_message(string.format("Lỗi %s %s: %s", method, endpoint, error_msg), "error")
        return false, nil
    end
end

-- Fetch Pet Data
local function get_pet_data()
    local pets = {}
    local pet_inventory = LocalPlayer:FindFirstChild("PetInventory") or game.Workspace:FindFirstChild("PetInventory")
    if pet_inventory then
        for _, pet in ipairs(pet_inventory:GetChildren()) do
            table.insert(pets, {
                name = pet.Name,
                uuid = pet:FindFirstChild("UUID") and pet.UUID.Value or "N/A",
                kg = pet:FindFirstChild("KG") and pet.KG.Value or "N/A",
                age = pet:FindFirstChild("Age") and pet.Age.Value or "N/A",
                owner = LocalPlayer.Name
            })
        end
    end
    return pets
end

-- Send Pet Data to Server
local function send_pet_data()
    local pets = get_pet_data()
    local data = {
        account_name = LocalPlayer.Name,
        pets = pets
    }
    local success, response = http_request("POST", "/post_pet_data", data)
    if success then
        log_message(string.format("Đã gửi dữ liệu %d pet về App.", #pets), "debug")
        return true
    else
        log_message("Lỗi khi gửi dữ liệu pet về App.", "error")
        return false
    end
end

-- Send Job ID to Server (for receiver)
local function send_job_id()
    local job_id = game.JobId
    if not job_id or job_id == "" then
        log_message("Send Job ID: Job ID trống, có thể đang ở chế độ single-player hoặc studio.", "warning")
        return false
    end
    local data = {
        account_name = LocalPlayer.Name,
        job_id = job_id
    }
    local success, response = http_request("POST", "/post_job_id", data)
    if success then
        log_message(string.format("Đã gửi Job ID: %s về App.", job_id), "debug")
        return true
    else
        log_message("Lỗi khi gửi Job ID về App.", "error")
        return false
    end
end

-- Join Server by Job ID
local function join_server_by_job_id(job_id)
    if not job_id or job_id == "" then
        log_message("Join Server: Job ID trống.", "error")
        status_label.Text = "Script: Teleport Failed! Join server manually."
        return false
    end
    if table.find(attempted_job_ids, job_id) then
        log_message(string.format("Join Server: Job ID %s đã thử trước đó, bỏ qua.", job_id), "warning")
        return false
    end
    table.insert(attempted_job_ids, job_id)
    local current_time = tick()
    if current_time - last_teleport_time < TELEPORT_COOLDOWN then
        log_message(string.format("Join Server: Chờ %d giây trước khi teleport lại.", TELEPORT_COOLDOWN), "warning")
        return false
    end
    last_teleport_time = current_time
    local teleportOptions = Instance.new("TeleportOptions")
    teleportOptions.ServerInstanceId = job_id
    log_message(string.format("Join Server: Thử teleport đến server với Job ID: %s (placeId: %s).", job_id, _G.UserConfig.DefaultPlaceId), "info")
    local success, result = pcall(function()
        TeleportService:TeleportPartyAsync(tonumber(_G.UserConfig.DefaultPlaceId), {LocalPlayer}, teleportOptions)
    end)
    if success then
        log_message(string.format("Join Server: Đã gửi yêu cầu teleport đến server với Job ID: %s.", job_id), "info")
        return true
    else
        if string.find(tostring(result), "full") or string.find(tostring(result), "capacity") then
            log_message(string.format("Join Server: Server với Job ID %s đầy, yêu cầu Job ID mới.", job_id), "warning")
            attempted_job_ids[#attempted_job_ids] = nil  -- Remove failed Job ID to allow retrying later
            return false
        else
            log_message(string.format("Join Server: Lỗi khi teleport: %s", result), "error")
            status_label.Text = string.format("Script: Teleport Failed! Join server manually with Job ID: %s", job_id)
            return false
        end
    end
end

-- Auto Accept Trade (for receiver)
local function auto_accept_trade(timeout)
    local trade_window = LocalPlayer.PlayerGui:FindFirstChild("TradeUI") or game.Workspace:FindFirstChild("TradeUI")
    if trade_window then
        local start_time = tick()
        while tick() - start_time < timeout do
            local accept_button = trade_window:FindFirstChild("AcceptButton")
            if accept_button and accept_button.Visible then
                log_message("Auto Accept: Đã tìm thấy nút Accept, đang nhấn...", "debug")
                accept_button:Activate()
                return true
            end
            wait(0.1)
        end
        log_message("Auto Accept: Hết thời gian chờ, không tìm thấy nút Accept.", "warning")
        return false
    end
    log_message("Auto Accept: Không tìm thấy Trade UI.", "warning")
    return false
end

-- Send Trade Status to Server
local function send_trade_status(status, pet_name, receiver_name, message)
    local data = {
        account_name = LocalPlayer.Name,
        status = status,
        pet_name = pet_name or "N/A",
        receiver_name = receiver_name or "N/A",
        message = message or "Không có tin nhắn chi tiết."
    }
    local success, response = http_request("POST", "/post_trade_status", data)
    if success then
        log_message(string.format("Đã gửi trạng thái giao dịch: %s", status), "debug")
        return true
    else
        log_message("Lỗi khi gửi trạng thái giao dịch về App.", "error")
        return false
    end
end

-- Trade Pet (for sender)
local function trade_pet(pet_name, receiver_name)
    local pet_inventory = LocalPlayer:FindFirstChild("PetInventory") or game.Workspace:FindFirstChild("PetInventory")
    if not pet_inventory then
        log_message("Trade Pet: Không tìm thấy PetInventory.", "error")
        return false
    end
    local pet = pet_inventory:FindFirstChild(pet_name)
    if not pet then
        log_message(string.format("Trade Pet: Không tìm thấy pet %s.", pet_name), "error")
        return false
    end
    local receiver = Players:FindFirstChild(receiver_name)
    if not receiver then
        log_message(string.format("Trade Pet: Không tìm thấy người chơi %s.", receiver_name), "error")
        return false
    end
    log_message(string.format("Trade Pet: Bắt đầu giao dịch pet %s tới %s.", pet_name, receiver_name), "info")
    trade_status = "Trading"
    local trade_success = false
    local trade_attempts = 0
    while trade_attempts < _G.UserConfig.RetryAttempts and not trade_success do
        trade_attempts = trade_attempts + 1
        local trade_ui = LocalPlayer.PlayerGui:FindFirstChild("TradeUI") or game.Workspace:FindFirstChild("TradeUI")
        if trade_ui then
            local pet_slot = trade_ui:FindFirstChild("PetSlot")
            if pet_slot then
                pet_slot:Invoke("AddPet", pet)
                wait(_G.UserConfig.TradeWaitDelay)
                local confirm_button = trade_ui:FindFirstChild("ConfirmButton")
                if confirm_button then
                    confirm_button:Activate()
                    trade_success = true
                    log_message(string.format("Đã gửi pet %s thành công tới %s.", pet_name, receiver_name), "success")
                    send_trade_status("success", pet_name, receiver_name, "Đã gửi yêu cầu.")
                else
                    log_message("Trade Pet: Không tìm thấy ConfirmButton.", "error")
                    send_trade_status("failed", pet_name, receiver_name, "Không tìm thấy ConfirmButton.")
                end
            else
                log_message("Trade Pet: Không tìm thấy PetSlot.", "error")
                send_trade_status("failed", pet_name, receiver_name, "Không tìm thấy PetSlot.")
            end
        else
            log_message("Trade Pet: Không tìm thấy Trade UI.", "error")
            send_trade_status("failed", pet_name, receiver_name, "Không tìm thấy Trade UI.")
        end
        if not trade_success then
            wait(_G.UserConfig.RetryDelay)
        end
    end
    trade_status = "Idle"
    return trade_success
end

-- Main Loop
local function main_loop()
    while true do
        if not is_fetching then
            is_fetching = true
            local success, config_data = http_request("POST", "/fetch_config", { account = LocalPlayer.Name })
            if success and config_data.status == "success" then
                local config = config_data.config
                script_status = "Online"
                status_label.TextColor3 = Color3.fromRGB(0, 255, 0)
                status_label.Text = "Script: Online"
                attempted_job_ids = {}  -- Reset attempted Job IDs for new fetch
                local job_id = config.job_id_to_join
                if config.operation_mode == "receive_pet" then
                    log_message("Chế độ: Nhận Pet. Đang gửi Job ID và chờ giao dịch.", "info")
                    send_job_id()
                    if job_id and job_id ~= "" then
                        local teleport_success = false
                        local teleport_attempts = 0
                        while not teleport_success and teleport_attempts < _G.UserConfig.MaxTeleportRetries do
                            teleport_success = join_server_by_job_id(job_id)
                            if not teleport_success then
                                log_message("Yêu cầu Job ID mới vì server đầy hoặc lỗi.", "warning")
                                wait(_G.UserConfig.RetryDelay)
                                success, config_data = http_request("POST", "/fetch_config", { account = LocalPlayer.Name })
                                if success and config_data.status == "success" then
                                    job_id = config_data.config.job_id_to_join
                                else
                                    log_message("Lỗi khi lấy Job ID mới.", "error")
                                    break
                                end
                            end
                            teleport_attempts = teleport_attempts + 1
                        end
                        if teleport_success then
                            auto_accept_trade(_G.UserConfig.AutoAcceptTimeout)
                        end
                    else
                        log_message("Không có Job ID để teleport.", "warning")
                        status_label.Text = "Script: No Job ID available."
                    end
                elseif config.operation_mode == "trade_pet" then
                    log_message("Chế độ: Gửi Pet. Chuẩn bị teleport và giao dịch.", "info")
                    if job_id and job_id ~= "" then
                        local teleport_success = false
                        local teleport_attempts = 0
                        while not teleport_success and teleport_attempts < _G.UserConfig.MaxTeleportRetries do
                            teleport_success = join_server_by_job_id(job_id)
                            if not teleport_success then
                                log_message("Yêu cầu Job ID mới vì server đầy hoặc lỗi.", "warning")
                                wait(_G.UserConfig.RetryDelay)
                                success, config_data = http_request("POST", "/fetch_config", { account = LocalPlayer.Name })
                                if success and config_data.status == "success" then
                                    job_id = config_data.config.job_id_to_join
                                else
                                    log_message("Lỗi khi lấy Job ID mới.", "error")
                                    break
                                end
                            end
                            teleport_attempts = teleport_attempts + 1
                        end
                        if teleport_success then
                            wait(_G.UserConfig.TeleportOffset)
                            for _, pet_name in ipairs(config.pets_to_trade_for_this_account) do
                                trade_pet(pet_name, config.receiver_account_name)
                            end
                        end
                    else
                        log_message("Không có Job ID để teleport.", "warning")
                        status_label.Text = "Script: No Job ID available."
                    end
                else
                    log_message("Chế độ: Idle.", "info")
                    script_status = "Idle"
                    status_label.Text = "Script: Idle"
                end
            else
                script_status = "Connection Failed"
                status_label.TextColor3 = Color3.fromRGB(255, 0, 0)
                status_label.Text = "Script: Connection Failed"
                log_message("Lỗi kết nối App Server.", "error")
            end
            is_fetching = false
        end
        send_pet_data()
        wait(_G.UserConfig.UpdateInterval)
    end
end

-- Start Script
local success, error_msg = pcall(main_loop)
if not success then
    log_message(string.format("Lỗi chính trong script: %s", error_msg), "error")
    status_label.TextColor3 = Color3.fromRGB(255, 0, 0)
    status_label.Text = "Script: Crashed"
end
