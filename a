print("START")
local supportedExecutors = {
    "Delta", "Arceus", "Fluxus", "Codex", "Cryptic", "Krnl", "Wave", "Volcano",
    "AWP", "Seliware", "Swift", "Argon", "TNG", "Ronix", "Potassium", "Trigon", "FortWare"
}
local executorName = getexecutorname and getexecutorname() or "Unknown"
local isSupported = false
for _, executor in ipairs(supportedExecutors) do
    if string.find(string.lower(executorName), string.lower(executor)) then
        isSupported = true; break
    end
end
if not isSupported and executorName ~= "Unknown" then
    game.Players.LocalPlayer:Kick("Unsupported executor. Please use executor support in discord: " .. table.concat(supportedExecutors, ", "))
    return
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
local VirtualUser = game:GetService("VirtualUser")
local CollectionService = game:GetService("CollectionService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local ContentProvider = game:GetService("ContentProvider")
local PhysicsService = game:GetService("PhysicsService")
local StarterGui = game:GetService("StarterGui")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Character
local Humanoid
local HumanoidRootPart
local Backpack = LocalPlayer:WaitForChild("Backpack")

local function getCharacter() local c=LocalPlayer.Character; if not c or not c.Parent then c=LocalPlayer.CharacterAdded:Wait() end; return c end
local function getHumanoid(char) if not char then return nil end; return char:WaitForChild("Humanoid", 5) end
local function getHumanoidRootPart(char) if not char then return nil end; return char:WaitForChild("HumanoidRootPart", 5) end

Character = getCharacter()
Humanoid = getHumanoid(Character)
HumanoidRootPart = getHumanoidRootPart(Character)

local kaitunColors = {
    Background = Color3.fromRGB(30,32,38), BackgroundSlightlyLighter = Color3.fromRGB(35,38,44),
    ElementBackground = Color3.fromRGB(45,48,56), ElementHover = Color3.fromRGB(55,60,70),
    Accent = Color3.fromRGB(80,120,220), TextPrimary = Color3.fromRGB(220,225,235),
    TextSecondary = Color3.fromRGB(160,165,175),
    ButtonJoin = Color3.fromRGB(80,120,220), ButtonJoinHover = Color3.fromRGB(70,105,190),
    StatusOn = Color3.fromRGB(76, 175, 80), StatusOff = Color3.fromRGB(244, 67, 54)
}
local bloodColors = {
    Background = Color3.fromRGB(30,32,38), BackgroundSlightlyLighter = Color3.fromRGB(35,38,44),
    ElementBackground = Color3.fromRGB(45,48,56), ElementHover = Color3.fromRGB(55,60,70),
    Accent = Color3.fromRGB(80,120,220), TextPrimary = Color3.fromRGB(220,225,235),
    TextSecondary = Color3.fromRGB(160,165,175), TextDisabled = Color3.fromRGB(120,125,135),
    StatusOff = Color3.fromRGB(230,90,90), StatusOn = Color3.fromRGB(90,210,190),
    SectionHeader = Color3.fromRGB(190,195,205), ScrollBar = Color3.fromRGB(65,70,80)
}
local tabColors = {
    ActiveBackground = bloodColors.ElementHover, ActiveText = bloodColors.TextPrimary,
    InactiveBackground = bloodColors.ElementBackground, InactiveText = bloodColors.TextSecondary
}
local toggleButtonColors = {
    OffBackground=bloodColors.ElementBackground, OffText=bloodColors.StatusOff,
    OnBackground=bloodColors.ElementHover, OnText=bloodColors.StatusOn
}

local HONEY_SUBMIT_POSITION_KAITUN = Vector3.new(-105, 4, -11)
local HONEY_SUBMIT_MOVE_SPEED_KAITUN = 300

local DonaldConfigDefaults = {
    ["AutoCollect"] = true,
    ["AutoPlant"] = true,
    ["AutoDestroy"] = false,
    ["SellThreshold"] = 50,
    ["PlantsToDestroy"] = {
        ["Daffodil"] = false, ["Coconut"] = false, ["Tomato"] = false, ["Apple"] = false,
        ["Blueberry"] = false, ["Strawberry"] = false, ["Watermelon"] = false, ["Mushroom"] = false,
        ["Pumpkin"] = false, ["Pepper"] = false, ["Cacao"] = false, ["Corn"] = false,
        ["Dragon Fruit"] = false, ["Orange Tulip"] = false, ["Carrot"] = false, ["Mango"] = false,
        ["Cactus"] = false, ["Beanstalk"] = false, ["Grape"] = false, ["Bamboo"] = false
    },
    ["AutoBuySeed"] = false,
    ["SelectSeed"] = {
        ["Carrot"] = false, ["Strawberry"] = false, ["Blueberry"] = false, ["Orange Tulip"] = false,
        ["Tomato"] = false, ["Corn"] = false, ["Daffodil"] = false, ["Watermelon"] = false,
        ["Pumpkin"] = false, ["Apple"] = false, ["Bamboo"] = false, ["Coconut"] = false,
        ["Cactus"] = false, ["Dragon Fruit"] = false, ["Mango"] = false, ["Grape"] = false,
        ["Mushroom"] = false, ["Pepper"] = false, ["Cacao"] = false, ["Beanstalk"] = false,
        ["Ember Lily"] = false, ["Sugar Apple"] = false, ["Burning Bud"] = false, ["Giant Pinecone"] = false,
        ["Elder Strawberry"] = false
    },
    ["AutoBuySeed_UseCustomDelay"] = false,
    ["AutoBuySeed_CustomDelaySeconds"] = 0.5,
    ["AutoBuySelectedGear"] = false,
    ["SelectedGearToBuy"] = {
        ["Trowel"] = false, ["Watering Can"] = false, ["Basic Sprinkler"] = false,
        ["Advanced Sprinkler"] = false, ["Godly Sprinkler"] = false, ["Lightning Rod"] = false,
        ["Master Sprinkler"] = false, ["Harvest Tool"] = false, ["Medium Treat"] = false,
        ["Recall Wrench"] = false, ["Medium Toy"] = false, ["Magnifying Glass"] = false,
        ["Cleaning Spray"] = false, ["Favorite Tool"] = false, ["Friendship Pot"] = false,
        ["Level Up Lollipop"] = false
    },
    ["AutoBuyEgg"] = {
["Common Egg"] = false, ["Mythical Egg"] = false, ["Bug Egg"] = false, ["Common Summer Egg"] = false,
["Rare Summer Egg"] = false, ["Paradise Egg"] = false
},
    ["Pet"] = {
        ["Name Pet"] = {"Kitsune","Butterfly","Dragonfly","Capybara","Ostrich","Mimic Octopus"},
    },
    ["AutoBuyGearDelaySeconds"] = 2, ["LastEnteredJobId"] = "",
    ["Boost FPS"] = false,
}
local Config = {}

local function saveConfig_Kaitun()
    if getgenv then getgenv().DonaldConfig = Config end
end

local function loadConfig_Kaitun()
    local userProvidedConfig = {}
    if getgenv and type(getgenv().DonaldConfig) == "table" then
        userProvidedConfig = getgenv().DonaldConfig
        print("Donald.gg Kaitun: User-provided config found in getgenv(). Merging with defaults.")
    else
        print("Donald.gg Kaitun: No user-provided config in getgenv() or not a table. Using full defaults.")
    end

    for key, defaultValue in pairs(DonaldConfigDefaults) do
        if type(defaultValue) == "table" then

            Config[key] = {}
            local userNestedTable = (type(userProvidedConfig[key]) == "table") and userProvidedConfig[key] or {}

            for nestedKey, nestedDefaultValue in pairs(defaultValue) do
                if userNestedTable[nestedKey] ~= nil then
                    Config[key][nestedKey] = userNestedTable[nestedKey]
                else
                    Config[key][nestedKey] = nestedDefaultValue
                end
            end

        else

            if userProvidedConfig[key] ~= nil then
                Config[key] = userProvidedConfig[key]
            else
                Config[key] = defaultValue
            end
        end
    end

    saveConfig_Kaitun()
    print("Donald.gg Kaitun: Configuration loaded and merged successfully.")
end

loadConfig_Kaitun()

local Options = {
    AutoBuyEggToggle = {Value = false},
    EggTypeBuySelect = {Value = Config.AutoBuyEgg}
}

LocalPlayer.CharacterAdded:Connect(function(newChar)
    Character = newChar
    Humanoid = getHumanoid(Character)
    HumanoidRootPart = getHumanoidRootPart(Character)
    if isLoadingComplete then
        if Config and Config["Anti-AFK"] then startAntiAFK_Kaitun() end
        if Config and Config["Boost FPS"] then if fpsBoostThread then task.cancel(fpsBoostThread); fpsBoostThread = nil; end; startFPSBoostLoop() end
    end
end)

local p_call_status, p_module = pcall(function() return require(ReplicatedStorage.Modules.Remotes) end)
local pp_collect
local CropsCollectRemote
if p_call_status and p_module then
    if p_module.Crops and p_module.Crops.Collect then
        pp_collect = p_module.Crops.Collect
        CropsCollectRemote = p_module.Crops.Collect
        print("Donald.gg Kaitun: Crops.Collect remote loaded successfully.")
    else
        warn("Donald.gg Kaitun: Crops.Collect not found in Remotes module.")
    end
else
    warn("Donald.gg Kaitun: Could not load Remotes module. Auto Collect and other features might not work. Error: ", tostring(p_module))
end

local GameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
if not GameEvents then warn("Donald.gg Kaitun: GameEvents folder not found. Many features might not work.") end

local isLoadingComplete = false
local screenGui = Instance.new("ScreenGui"); screenGui.Name="Donald.ggKaitunUI_FinalGAB_TopPanelFix"; screenGui.ZIndexBehavior=Enum.ZIndexBehavior.Sibling; screenGui.ResetOnSpawn=false; screenGui.DisplayOrder=999; screenGui.IgnoreGuiInset=true; screenGui.Parent=PlayerGui

local loadingScreenFrame = Instance.new("Frame", screenGui); loadingScreenFrame.Name = "Donald.ggLoadingScreen"; loadingScreenFrame.Size = UDim2.fromScale(1, 1); loadingScreenFrame.BackgroundColor3 = bloodColors.Background; loadingScreenFrame.BackgroundTransparency = 0; loadingScreenFrame.ZIndex = 10000
local loadingLogoImage = Instance.new("ImageLabel", loadingScreenFrame); loadingLogoImage.Name = "LoadingLogo"; loadingLogoImage.Size = UDim2.new(0, 80, 0, 80); loadingLogoImage.Position = UDim2.new(0.5, 0, 0.4, 0); loadingLogoImage.AnchorPoint = Vector2.new(0.5, 0.5); loadingLogoImage.BackgroundTransparency = 1; loadingLogoImage.Image = "rbxassetid://91347148253026"; loadingLogoImage.ScaleType = Enum.ScaleType.Fit; Instance.new("UICorner", loadingLogoImage).CornerRadius = UDim.new(1, 0)
local loadingStatusLabel = Instance.new("TextLabel", loadingScreenFrame); loadingStatusLabel.Name = "LoadingStatus"; loadingStatusLabel.Size = UDim2.new(1, 0, 0, 30); loadingStatusLabel.Position = UDim2.new(0.5, 0, 0.5, 20); loadingStatusLabel.AnchorPoint = Vector2.new(0.5, 0); loadingStatusLabel.BackgroundTransparency = 1; loadingStatusLabel.Font = Enum.Font.GothamSemibold; loadingStatusLabel.Text = "Loading Donald.gg Kaitun..."; loadingStatusLabel.TextColor3 = bloodColors.TextPrimary; loadingStatusLabel.TextSize = 18
local loadingProgressBarBackground = Instance.new("Frame", loadingScreenFrame); loadingProgressBarBackground.Name = "ProgressBarBackground"; loadingProgressBarBackground.Size = UDim2.new(0, 250, 0, 12); loadingProgressBarBackground.Position = UDim2.new(0.5, 0, 0.5, 60); loadingProgressBarBackground.AnchorPoint = Vector2.new(0.5, 0); loadingProgressBarBackground.BackgroundColor3 = bloodColors.ElementBackground; loadingProgressBarBackground.BorderSizePixel = 0; Instance.new("UICorner", loadingProgressBarBackground).CornerRadius = UDim.new(0, 6)
local loadingProgressBarFill = Instance.new("Frame", loadingProgressBarBackground); loadingProgressBarFill.Name = "ProgressBarFill"; loadingProgressBarFill.Size = UDim2.new(0, 0, 1, 0); loadingProgressBarFill.BackgroundColor3 = bloodColors.Accent; loadingProgressBarFill.BorderSizePixel = 0; Instance.new("UICorner", loadingProgressBarFill).CornerRadius = UDim.new(0, 6)
local loadingProgressText = Instance.new("TextLabel", loadingProgressBarBackground); loadingProgressText.Name = "ProgressPercentage"; loadingProgressText.Size = UDim2.fromScale(1, 1); loadingProgressText.BackgroundTransparency = 1; loadingProgressText.Font = Enum.Font.GothamBold; loadingProgressText.Text = "0%"; loadingProgressText.TextColor3 = bloodColors.TextPrimary; loadingProgressText.TextSize = 10
local totalLoadTasks = 115; local currentLoadProgress = 0
local function updateLoadingProgress(incrementBy) incrementBy = incrementBy or 1; currentLoadProgress = math.min(currentLoadProgress + incrementBy, totalLoadTasks); local p = math.floor((currentLoadProgress / totalLoadTasks) * 100); if loadingProgressText and loadingProgressText.Parent then loadingProgressText.Text = p .. "%" end; if loadingProgressBarFill and loadingProgressBarFill.Parent then TweenService:Create(loadingProgressBarFill, TweenInfo.new(0.1), { Size = UDim2.new(p / 100, 0, 1, 0) }):Play() end; if p < 100 then task.wait(0.005) end end
updateLoadingProgress(1)

local function formatTime(ts) local h=math.floor(ts/3600); local m=math.floor((ts%3600)/60); local s=math.floor(ts%60); return string.format("%02i:%02i:%02i", h, m, s) end
local currentActionStatus = "Initializing..."
local collectStatusLabel_BloodUI, sellStatusLabel_BloodUI
local function updateActionStatus(text)
    print("[Donald.gg Kaitun Status]", text)
    currentActionStatus = text

    if string.find(text, "Collect") and collectStatusLabel_BloodUI and collectStatusLabel_BloodUI.Parent then collectStatusLabel_BloodUI.Text = text
    elseif string.find(text, "Sell") and sellStatusLabel_BloodUI and sellStatusLabel_BloodUI.Parent then sellStatusLabel_BloodUI.Text = text
    elseif collectStatusLabel_BloodUI and collectStatusLabel_BloodUI.Parent and not string.find(text, "Auto Buy") and not string.find(text, "Join Job ID") and not string.find(text, "Planting") and not string.find(text, "Destroying") and not string.find(text, "Auto Submit") then
        local currentFruitCount = getFruitCount(); local sellThreshold = tonumber(Config.SellThreshold) or 50
        collectStatusLabel_BloodUI.Text = string.format("Auto Collect: %s (%d/%d Fruit)", text, currentFruitCount, sellThreshold)
    end
end

local SHOP_ITEM_MAP_FOR_SEEDS_KAITUN = { ["Carrot"] = { internalId = "Carrot" }, ["Strawberry"] = { internalId = "Strawberry" }, ["Blueberry"] = { internalId = "Blueberry" }, ["Orange Tulip"] = { internalId = "Orange" }, ["Tomato"] = { internalId = "Tomato" }, ["Corn"] = { internalId = "Corn" }, ["Daffodil"] = { internalId = "Daffodil" }, ["Watermelon"] = { internalId = "Watermelon" }, ["Pumpkin"] = { internalId = "Pumpkin" }, ["Apple"] = { internalId = "Apple" }, ["Bamboo"] = { internalId = "Bamboo" }, ["Coconut"] = { internalId = "Coconut" }, ["Cactus"] = { internalId = "Cactus" }, ["Dragon Fruit"] = { internalId = "Dragon Fruit" }, ["Mango"] = { internalId = "Mango" }, ["Grape"] = { internalId = "Grape" }, ["Mushroom"] = { internalId = "Mushroom" }, ["Pepper"] = { internalId = "Pepper" }, ["Cacao"] = { internalId = "Cacao" }, ["Beanstalk"] = { internalId = "Beanstalk" }, ["Ember Lily"] = { internalId = "Ember Lily"}, ["Sugar Apple"] = { internalId = "Sugar Apple" }, ["Burning Bud"] = { internalId = "Burning Bud" }, ["Giant Pinecone"] = { internalId = "Giant Pinecone" }, ["Elder Strawberry"] = { internalId = "Elder Strawberry" } }
local SORTED_SEED_SHOP_ITEM_KEYS_KAITUN = {}; for k in pairs(SHOP_ITEM_MAP_FOR_SEEDS_KAITUN) do table.insert(SORTED_SEED_SHOP_ITEM_KEYS_KAITUN, k) end; table.sort(SORTED_SEED_SHOP_ITEM_KEYS_KAITUN)

local AutoBuySeedModule_Kaitun = {}
local seedAutoBuyLoopThread_Kaitun = nil
local buySeedStockEventCache_Kaitun = nil

local function getBuySeedStockEvent_Kaitun()
    if buySeedStockEventCache_Kaitun and buySeedStockEventCache_Kaitun.Parent then return buySeedStockEventCache_Kaitun end
    if not GameEvents then warn("Donald.gg Kaitun: GameEvents not found in ReplicatedStorage."); return nil end
    local remote = GameEvents:FindFirstChild("BuySeedStock")
    if not remote or not remote:IsA("RemoteEvent") then warn("Donald.gg Kaitun: BuySeedStock RemoteEvent not found."); return nil end
    buySeedStockEventCache_Kaitun = remote
    return remote
end

local function sendBuySeedRequest_Kaitun(internalId)
    if not internalId then return false end
    local event = getBuySeedStockEvent_Kaitun()
    if not event then return false end
    local success, err = pcall(function() event:FireServer(internalId) end)
    if not success then warn("Donald.gg Kaitun: Error firing BuySeedStock:", err) end
    return success
end

function AutoBuySeedModule_Kaitun.start()
    if seedAutoBuyLoopThread_Kaitun then task.cancel(seedAutoBuyLoopThread_Kaitun) end
    if not Config.AutoBuySeed then return end

    seedAutoBuyLoopThread_Kaitun = task.spawn(function()
        updateActionStatus("Auto Buy Seeds: Started.")
        while Config.AutoBuySeed and isLoadingComplete do
            local overallDelay = 0.5
            if Config.AutoBuySeed_UseCustomDelay then
                local customDelayInput = tonumber(Config.AutoBuySeed_CustomDelaySeconds)
                if customDelayInput and customDelayInput > 0 then overallDelay = customDelayInput end
            end

            local selectedSeedsConfig = Config.SelectSeed
            local purchasedThisCycle = false
            if selectedSeedsConfig and next(selectedSeedsConfig) ~= nil then
                for seedName, isSelected in pairs(selectedSeedsConfig) do
                    if not (Config.AutoBuySeed and isLoadingComplete) then break end
                    if isSelected and seedName ~= "None" then
                        local itemData = SHOP_ITEM_MAP_FOR_SEEDS_KAITUN[seedName]
                        if itemData and itemData.internalId then
                            updateActionStatus(string.format("Auto Buy Seeds: Buying %s...", seedName))
                            if sendBuySeedRequest_Kaitun(itemData.internalId) then
                                purchasedThisCycle = true
                                task.wait(0.15)
                            else
                                updateActionStatus(string.format("Auto Buy Seeds: Failed %s.", seedName))
                                task.wait(0.5)
                            end
                        end
                    end
                end
                if not (Config.AutoBuySeed and isLoadingComplete) then break end
                if purchasedThisCycle then
                     updateActionStatus("Auto Buy Seeds: Cycle done. Waiting overall delay...")
                end
                task.wait(overallDelay)
            else
                task.wait(overallDelay)
            end
        end
        updateActionStatus("Auto Buy Seeds: Stopped.")
        seedAutoBuyLoopThread_Kaitun = nil
        if Config.AutoBuySeed then
            Config.AutoBuySeed = false; saveConfig_Kaitun()
        end
    end)
end

function AutoBuySeedModule_Kaitun.stop()
    if seedAutoBuyLoopThread_Kaitun then
        task.cancel(seedAutoBuyLoopThread_Kaitun)
        seedAutoBuyLoopThread_Kaitun = nil
    end
    updateActionStatus("Auto Buy Seeds: Manually stopped.")
end
updateLoadingProgress(1)

local SHOP_TOOL_MAP_KAITUN = { ["Trowel"] = { internalId = "Trowel", enabled = false }, ["Watering Can"] = { internalId = "Watering Can", enabled = false }, ["Basic Sprinkler"] = { internalId = "Basic Sprinkler", enabled = false }, ["Advanced Sprinkler"] = { internalId = "Advanced Sprinkler", enabled = false }, ["Godly Sprinkler"] = { internalId = "Godly Sprinkler", enabled = false }, ["Lightning Rod"] = { internalId = "Lightning Rod", enabled = false }, ["Master Sprinkler"] = { internalId = "Master Sprinkler", enabled = false }, ["Harvest Tool"] = { internalId = "Harvest Tool", enabled = false }, ["Medium Treat"] = { internalId = "Medium Treat", enabled = false }, ["Recall Wrench"] = { internalId = "Recall Wrench", enabled = false }, ["Medium Toy"] = { internalId = "Medium Toy", enabled = false }, ["Magnifying Glass"] = { internalId = "Magnifying Glass", enabled = false }, ["Cleaning Spray"] = { internalId = "Cleaning Spray", enabled = false }, ["Favorite Tool"] = { internalId = "Favorite Tool", enabled = false }, ["Friendship Pot"] = { internalId = "Friendship Pot", enabled = false }, ["Level Up Lollipop"] = { internalId = "Level Up Lollipop", enabled = false } }
local buyGearStockEventCache_Kaitun = nil
local function getBuyGearStockEvent_Kaitun() if buyGearStockEventCache_Kaitun and buyGearStockEventCache_Kaitun.Parent then return buyGearStockEventCache_Kaitun end if not GameEvents then warn("Donald.gg Kaitun AutoBuyGear: GameEvents not found."); return nil end local r = GameEvents:FindFirstChild("BuyGearStock") if not r or not r:IsA("RemoteEvent") then warn("Donald.gg Kaitun AutoBuyGear: 'BuyGearStock' RE not found."); return nil end buyGearStockEventCache_Kaitun = r; return r end
local function sendBuyToolRequest_Kaitun(id) if not id then return false end local ev = getBuyGearStockEvent_Kaitun() if not ev then return false end local s,e = pcall(function() ev:FireServer(id) end) if not s then warn("Donald.gg Kaitun AutoBuyGear: Error BuyGearStock for:",id,"Error:",e); return false end return true end
local autoBuySelectedGearThread_Kaitun = nil
local function startAutoBuySelectedGearLoop_Kaitun() if autoBuySelectedGearThread_Kaitun then task.cancel(autoBuySelectedGearThread_Kaitun) end if not Config.AutoBuySelectedGear then return end autoBuySelectedGearThread_Kaitun = task.spawn(function() updateActionStatus("Auto Buy Gear: Started.") while Config.AutoBuySelectedGear and isLoadingComplete do local b=false; local d=tonumber(Config.AutoBuyGearDelaySeconds) or 5 for gn,sb in pairs(Config.SelectedGearToBuy) do if not Config.AutoBuySelectedGear then break end if sb then local gd=SHOP_TOOL_MAP_KAITUN[gn] if gd and gd.internalId then updateActionStatus(string.format("Auto Buy Gear: Buying %s...",gn)) if sendBuyToolRequest_Kaitun(gd.internalId) then b=true; task.wait(0.3) else updateActionStatus(string.format("Auto Buy Gear: Fail %s.",gn)); task.wait(0.5) end else warn("VxezDonald.ggeHub Kaitun AutoBuyGear: No ID for:",gn); task.wait(0.1) end end end if not Config.AutoBuySelectedGear then break end if b then updateActionStatus("Auto Buy Gear: Cycle done. Wait..."); task.wait(d) else task.wait(math.max(d,2)) end end updateActionStatus("Auto Buy Gear: Stopped."); autoBuySelectedGearThread_Kaitun = nil end) end
local function stopAutoBuySelectedGearLoop_Kaitun() if autoBuySelectedGearThread_Kaitun then task.cancel(autoBuySelectedGearThread_Kaitun); autoBuySelectedGearThread_Kaitun = nil end end; updateLoadingProgress(1)

local JobIdInputTextBox_Remake, JoinJobIdButton_Remake
local function teleportToJobId_Kaitun() local jid = JobIdInputTextBox_Remake and JobIdInputTextBox_Remake.Text if not jid or jid=="" then updateActionStatus("Join Job ID: Empty ID."); if JobIdInputTextBox_Remake then JobIdInputTextBox_Remake.Text="" end return end if not string.match(jid,"^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") then updateActionStatus("Join Job ID: Invalid ID format."); if JobIdInputTextBox_Remake then JobIdInputTextBox_Remake.Text="" end return end Config.LastEnteredJobId=jid; saveConfig_Kaitun() updateActionStatus("Join Job ID: Teleporting to "..jid) local s,e=pcall(function() TeleportService:TeleportToPlaceInstance(game.PlaceId,jid,LocalPlayer) end) if not s then updateActionStatus("Join Job ID: Teleport failed: "..tostring(e)) else updateActionStatus("Join Job ID: Teleport initiated.") end end; updateLoadingProgress(1)

local antiAfkConnection_Kaitun = nil
local function startAntiAFK_Kaitun() if antiAfkConnection_Kaitun then antiAfkConnection_Kaitun:Disconnect(); antiAfkConnection_Kaitun=nil end if not Config["Anti-AFK"] then print("Donald.gg Kaitun AntiAFK: Disabled."); return end if not VirtualUser then warn("Donald.gg Kaitun AntiAFK: VirtualUser not available."); return end antiAfkConnection_Kaitun=LocalPlayer.Idled:Connect(function() if not isLoadingComplete or not Config["Anti-AFK"] then return end pcall(function() VirtualUser:CaptureController(); VirtualUser:ClickButton2(Vector2.new()); task.wait(0.05) end) print("Donald.gg Kaitun AntiAFK: Idled.") end) print("Donald.gg Kaitun AntiAFK: Started.") end
local function stopAntiAFK_Kaitun() if antiAfkConnection_Kaitun then antiAfkConnection_Kaitun:Disconnect(); antiAfkConnection_Kaitun=nil; print("Donald.gg Kaitun AntiAFK: Stopped.") end end; updateLoadingProgress(1)

local honeyMachineServiceEventCache_Kaitun = nil
local function getHoneyMachineServiceEvent_Kaitun() if honeyMachineServiceEventCache_Kaitun and honeyMachineServiceEventCache_Kaitun.Parent then return honeyMachineServiceEventCache_Kaitun end if not GameEvents then warn("Donald.gg Kaitun AutoSubmitPollinated: GameEvents not found."); return nil end local r=GameEvents:FindFirstChild("HoneyMachineService_RE") if not r or not r:IsA("RemoteEvent") then warn("Donald.gg Kaitun AutoSubmitPollinated: HoneyMachineService_RE RE not found."); return nil end honeyMachineServiceEventCache_Kaitun=r; return r end
local function findPollinatedToolInBackpack_Kaitun() if not Backpack then return nil end for _,i in ipairs(Backpack:GetChildren()) do if i:IsA("Tool") and string.lower(i.Name):find("pollinated",1,true) then return i end end return nil end
local autoSubmitPollinatedThread_Kaitun = nil
local function performSingleSubmission_Kaitun() if not isLoadingComplete then return false end local cS=getCharacter() if not cS or not cS.Parent then return false end local hS=getHumanoid(cS); local rS=getHumanoidRootPart(cS) if not hS or not rS or not rS.Parent then return false end if hS:GetState()==Enum.HumanoidStateType.Seated then hS.Sit=false; task.wait(0.2) end if hS:GetState()==Enum.HumanoidStateType.Dead then return false end if rS.Anchored then if hS:GetState()~=Enum.HumanoidStateType.Dead then pcall(function() rS.Anchored=false end); task.wait(0.05) else return false end end local pt=findPollinatedToolInBackpack_Kaitun() if not pt then return false end updateActionStatus(string.format("Auto Submit: Equipping %s...",pt.Name)) hS:EquipTool(pt); task.wait(0.3) if cS:FindFirstChildOfClass("Tool")~=pt then updateActionStatus("Auto Submit: Fail equip Pollinated tool."); hS:UnequipTools(); return false end local cfb=rS.CFrame; local o=cfb-cfb.Position; local tc=CFrame.new(HONEY_SUBMIT_POSITION_KAITUN)*o; local d=(tc.Position-cfb.Position).Magnitude if d>0.5 then updateActionStatus("Auto Submit: Moving...") local tt=math.max(0.1,d/HONEY_SUBMIT_MOVE_SPEED_KAITUN); local ti=TweenInfo.new(tt,Enum.EasingStyle.Linear); local tw=TweenService:Create(rS,ti,{CFrame=tc}) local s,res=pcall(function() tw:Play(); return tw.Completed:Wait() end) if not s or (typeof(res)=="Enum.PlaybackState" and res~=Enum.PlaybackState.Completed) then updateActionStatus("Auto Submit: Movement failed."); if rS and rS.Parent then rS.AssemblyLinearVelocity=Vector3.zero; rS.AssemblyAngularVelocity=Vector3.zero; end if cS:FindFirstChildOfClass("Tool")==pt then hS:UnequipTools() end return false end end if rS and rS.Parent then rS.CFrame=tc; rS.AssemblyLinearVelocity=Vector3.zero; rS.AssemblyAngularVelocity=Vector3.zero; end task.wait(0.5) local her=getHoneyMachineServiceEvent_Kaitun() if her then updateActionStatus("Auto Submit: Submitting Pollinated item...") local fs,fe=pcall(her.FireServer,her,"MachineInteract") if not fs then warn("Donald.gg Kaitun AutoSubmitPollinated: Error HoneyMachineService_RE: "..tostring(fe)); updateActionStatus("Auto Submit: Submit fire error.") else updateActionStatus("Auto Submit: Submitted.") end else warn("Donald.gg Kaitun AutoSubmitPollinated: HoneyMachineService_RE not found."); updateActionStatus("Auto Submit: Submit remote not found.") end task.wait(1.5) if cS:FindFirstChildOfClass("Tool")==pt then hS:UnequipTools() end return true end
local function startAutoSubmitPollinatedLoop_Kaitun() if autoSubmitPollinatedThread_Kaitun then task.cancel(autoSubmitPollinatedThread_Kaitun) end if not Config.AutoSubmitPollinatedFruit then return end autoSubmitPollinatedThread_Kaitun=task.spawn(function() updateActionStatus("Auto Submit Pollinated: Started.") while Config.AutoSubmitPollinatedFruit and isLoadingComplete do local sTC=false while Config.AutoSubmitPollinatedFruit and isLoadingComplete do local ptib=findPollinatedToolInBackpack_Kaitun() if ptib then if performSingleSubmission_Kaitun() then sTC=true; task.wait(1) else task.wait(2); break end else break end end if not Config.AutoSubmitPollinatedFruit then break end if sTC then updateActionStatus("Auto Submit Pollinated: Cycle done. Wait.") end task.wait(Config.AutoSubmitPollinatedDelaySeconds or 10) end updateActionStatus("Auto Submit Pollinated: Stopped."); autoSubmitPollinatedThread_Kaitun=nil end) end
local function stopAutoSubmitPollinatedLoop_Kaitun() if autoSubmitPollinatedThread_Kaitun then task.cancel(autoSubmitPollinatedThread_Kaitun); autoSubmitPollinatedThread_Kaitun=nil end end; updateLoadingProgress(1)

local HONEY_EVENT_ITEM_NAMES_KAITUN = { "Flower Seed Pack", "Nectarine", "Hive Fruit", "Honey Sprinkler", "Bee Egg", "Bee Crate", "Honey Comb", "Bee Chair", "Honey Torch", "Honey Walkaway" }
local buyEventShopStockEventCache_Kaitun = nil
local function getBuyEventShopStockEvent_Kaitun() if buyEventShopStockEventCache_Kaitun and buyEventShopStockEventCache_Kaitun.Parent then return buyEventShopStockEventCache_Kaitun end if not GameEvents then warn("Donald.gg Kaitun AutoBuyHoney: GameEvents not found."); return nil end local r=GameEvents:FindFirstChild("BuyEventShopStock") if not r or not r:IsA("RemoteEvent") then warn("Donald.gg Kaitun AutoBuyHoney: BuyEventShopStock RE not found."); return nil end buyEventShopStockEventCache_Kaitun=r; return r end
local function sendBuyHoneyShopItemRequest_Kaitun(itemName) if not itemName then return false end local ev=getBuyEventShopStockEvent_Kaitun() if not ev then return false end local s,e=pcall(function() ev:FireServer(itemName) end) if not s then warn("Donald.gg Kaitun AutoBuyHoney: Error BuyEventShopStock for:",itemName,"Error:",e); return false end return true end
local autoBuyHoneyShopItemsThread_Kaitun = nil
local function startAutoBuyHoneyShopItemsLoop_Kaitun() if autoBuyHoneyShopItemsThread_Kaitun then task.cancel(autoBuyHoneyShopItemsThread_Kaitun) end if not Config.AutoBuyHoneyShopItems then return end autoBuyHoneyShopItemsThread_Kaitun=task.spawn(function() updateActionStatus("Auto Buy Honey Shop: Started.") while Config.AutoBuyHoneyShopItems and isLoadingComplete do local pTC=false; local cD=tonumber(Config.AutoBuyHoneyShopDelaySeconds) or 5 for iN,sB in pairs(Config.SelectedHoneyShopItemsToBuy) do if not Config.AutoBuyHoneyShopItems then break end if sB then local iv=false; for _,vn in ipairs(HONEY_EVENT_ITEM_NAMES_KAITUN) do if iN==vn then iv=true; break end end if iv then updateActionStatus(string.format("Auto Buy Honey Shop: Buying %s...",iN)) if sendBuyHoneyShopItemRequest_Kaitun(iN) then pTC=true; task.wait(0.25) else updateActionStatus(string.format("Auto Buy Honey Shop: Fail %s.",iN)); task.wait(0.5) end else warn("Donald.gg Kaitun AutoBuyHoney: Invalid item in SelectedHoneyShopItemsToBuy:",iN) end end end if not Config.AutoBuyHoneyShopItems then break end if pTC then updateActionStatus("Auto Buy Honey Shop: Cycle done. Wait.") end task.wait(cD) end updateActionStatus("Auto Buy Honey Shop: Stopped."); autoBuyHoneyShopItemsThread_Kaitun=nil end) end
local function stopAutoBuyHoneyShopItemsLoop_Kaitun() if autoBuyHoneyShopItemsThread_Kaitun then task.cancel(autoBuyHoneyShopItemsThread_Kaitun); autoBuyHoneyShopItemsThread_Kaitun=nil end end; updateLoadingProgress(1)

local fpsBoostThread = nil; local originalAnimateDisabledState = false
local function applyFPSBoostMeasures() if not Character or not Character.Parent then return end if Character:FindFirstChild("Pants") then Character.Pants:Destroy() end local animateScript=Character:FindFirstChild("Animate") if animateScript and animateScript:IsA("LocalScript") then originalAnimateDisabledState=animateScript.Disabled; animateScript.Disabled=true end loadstring(game:HttpGet("https://raw.githubusercontent.com/JewhisKids/NewFreeScript/main/Misc/SuperFpsBoost.lua"))() if typeof(setfpscap)=="function" then setfpscap(59) end end
local function revertFPSBoostMeasures() if not Character or not Character.Parent then return end local animateScript=Character:FindFirstChild("Animate") if animateScript and animateScript:IsA("LocalScript") then animateScript.Disabled=originalAnimateDisabledState end if typeof(setfpscap)=="function" then setfpscap(0) end print("Donald.gg Kaitun: FPS Boost measures reverted.") end
local function startFPSBoostLoop() if fpsBoostThread then task.cancel(fpsBoostThread); fpsBoostThread=nil; end if not Config["Boost FPS"] then revertFPSBoostMeasures(); return; end fpsBoostThread=task.spawn(function() print("Donald.gg Kaitun: FPS Boost Loop Started.") while Config["Boost FPS"] and isLoadingComplete and screenGui.Parent do applyFPSBoostMeasures(); task.wait(1) end if not Config["Boost FPS"] then revertFPSBoostMeasures() end print("Donald.gg Kaitun: FPS Boost Loop Stopped."); fpsBoostThread=nil end) end
local function stopFPSBoostLoop() if fpsBoostThread then task.cancel(fpsBoostThread); fpsBoostThread=nil; end revertFPSBoostMeasures() end; updateLoadingProgress(1)

local dimmingFrame, mainInfoFrame, logoImage_GAB, titleLabel_GAB, timerLabel_GAB
local rightSidePanel, rightScrollingFrame_GAB, rightPanelFooter_GAB, rightToggleButton_GAB
local leftSidePanel, leftScrollingFrame_GAB, leftToggleButton_GAB, topInfoContainer_GAB, leftLogoImage_GAB, leftDevLabel_GAB, topSeparator_GAB
local bottomContentPanel, bottomPanelHeader_GAB, tabSelectorFrame_GAB, bottomToggleButton_GAB
local rspl_GAB, lspl_GAB
local mainInfoFrameOriginalPosition_GAB; local rightPanelOpenState_GAB=true; local leftPanelOpen_GAB=false; local bottomPanelOpen_GAB = false; local rightPanelAnimInfo_GAB=TweenInfo.new(0.35,Enum.EasingStyle.Quint,Enum.EasingDirection.Out); local sidePanelVerticalPositionScale_GAB=0.5; local rightPanelWidth_GAB=210; local leftPanelWidth_GAB=230;
local featureStatusLabels_Remake = {}

local function createFeatureStatusDisplayRow_Remake(parent, featureDisplayName, configKey, order) local RowFrame=Instance.new("Frame",parent); RowFrame.Name=featureDisplayName:gsub("%s+","").."StatusRow"; RowFrame.Size=UDim2.new(1,0,0,20); RowFrame.BackgroundTransparency=1; RowFrame.LayoutOrder=order; local RowLayout=Instance.new("UIListLayout",RowFrame); RowLayout.FillDirection=Enum.FillDirection.Horizontal; RowLayout.VerticalAlignment=Enum.VerticalAlignment.Center; RowLayout.SortOrder=Enum.SortOrder.LayoutOrder; RowLayout.Padding=UDim.new(0,5); local FeatureNameLabel=Instance.new("TextLabel",RowFrame); FeatureNameLabel.Name="FeatureNameLabel"; FeatureNameLabel.Size=UDim2.new(0.65,0,1,0); FeatureNameLabel.BackgroundTransparency=1; FeatureNameLabel.Font=Enum.Font.Gotham; FeatureNameLabel.Text=featureDisplayName..":"; FeatureNameLabel.TextColor3=bloodColors.TextSecondary; FeatureNameLabel.TextSize=13; FeatureNameLabel.TextXAlignment=Enum.TextXAlignment.Left; local StatusValueLabel=Instance.new("TextLabel",RowFrame); StatusValueLabel.Name="StatusValueLabel"; StatusValueLabel.Size=UDim2.new(0.35,-RowLayout.Padding.Offset,1,0); StatusValueLabel.BackgroundTransparency=1; StatusValueLabel.Font=Enum.Font.GothamBold; StatusValueLabel.Text="Unknown"; StatusValueLabel.TextColor3=bloodColors.TextDisabled; StatusValueLabel.TextSize=13; StatusValueLabel.TextXAlignment=Enum.TextXAlignment.Right; featureStatusLabels_Remake[configKey]=StatusValueLabel; return StatusValueLabel end
local function updateFeatureStatusDisplays_Remake() if not isLoadingComplete or not Config then return end for cK,sLI in pairs(featureStatusLabels_Remake) do if sLI and sLI.Parent then local iE=Config[cK] if iE then sLI.Text="Enabled"; sLI.TextColor3=kaitunColors.StatusOn else sLI.Text="Disabled"; sLI.TextColor3=kaitunColors.StatusOff end end end if lspl_GAB and lspl_GAB.Parent then task.wait(0.05) local nCY=lspl_GAB.AbsoluteContentSize.Y if nCY>0 and leftScrollingFrame_GAB.CanvasSize.Y.Offset~=(nCY+8) then leftScrollingFrame_GAB.CanvasSize=UDim2.new(0,0,0,nCY+8) end end end; updateLoadingProgress(1)

coroutine.wrap(function()
    updateLoadingProgress(1); dimmingFrame=Instance.new("Frame",screenGui); dimmingFrame.Name="DimmingEffect"; dimmingFrame.BackgroundColor3=Color3.fromRGB(0,0,0); dimmingFrame.BackgroundTransparency=0.75; dimmingFrame.Size=UDim2.fromScale(1,1); dimmingFrame.ZIndex=1; dimmingFrame.Visible=false; updateLoadingProgress(1)
    mainInfoFrameOriginalPosition_GAB = UDim2.new(0.5,0,0.05,0); mainInfoFrame=Instance.new("Frame",screenGui); mainInfoFrame.Name="KaitunInfoFrame_GAB_Shell"; mainInfoFrame.AnchorPoint=Vector2.new(0.5,0); mainInfoFrame.Position=mainInfoFrameOriginalPosition_GAB; mainInfoFrame.Size=UDim2.new(0,300,0,120); mainInfoFrame.BackgroundColor3=bloodColors.ElementBackground; mainInfoFrame.BackgroundTransparency=0.05; mainInfoFrame.ClipsDescendants=true; mainInfoFrame.ZIndex=10; Instance.new("UICorner",mainInfoFrame).CornerRadius=UDim.new(0,12); local mig=Instance.new("UIGradient",mainInfoFrame); mig.Color=ColorSequence.new({ColorSequenceKeypoint.new(0,bloodColors.ElementHover),ColorSequenceKeypoint.new(1,bloodColors.ElementBackground)}); mig.Rotation=90; local mip=Instance.new("UIPadding",mainInfoFrame); mip.PaddingTop=UDim.new(0,10); mip.PaddingBottom=UDim.new(0,10); mip.PaddingLeft=UDim.new(0,10); mip.PaddingRight=UDim.new(0,10); local mil=Instance.new("UIListLayout",mainInfoFrame); mil.Padding=UDim.new(0,3); mil.SortOrder=Enum.SortOrder.LayoutOrder; mil.HorizontalAlignment=Enum.HorizontalAlignment.Center; updateLoadingProgress(1)
    logoImage_GAB=Instance.new("ImageLabel",mainInfoFrame); logoImage_GAB.Name="Logo_GAB"; logoImage_GAB.LayoutOrder=1; logoImage_GAB.Size=UDim2.new(0,30,0,30); logoImage_GAB.BackgroundTransparency=1; logoImage_GAB.Image="rbxassetid://91347148253026"; logoImage_GAB.ScaleType=Enum.ScaleType.Fit; Instance.new("UICorner",logoImage_GAB).CornerRadius=UDim.new(1,0); updateLoadingProgress(1)
    titleLabel_GAB=Instance.new("TextLabel",mainInfoFrame); titleLabel_GAB.Name="Title_GAB"; titleLabel_GAB.LayoutOrder=2; titleLabel_GAB.Size=UDim2.new(1,0,0,22); titleLabel_GAB.BackgroundTransparency=1; titleLabel_GAB.Font=Enum.Font.GothamSemibold; titleLabel_GAB.Text="Donald.gg Kaitun"; titleLabel_GAB.TextColor3=bloodColors.TextPrimary; titleLabel_GAB.TextSize=18; updateLoadingProgress(1)
    collectStatusLabel_BloodUI=Instance.new("TextLabel",mainInfoFrame); collectStatusLabel_BloodUI.Name="CollectStatus_FromRemake"; collectStatusLabel_BloodUI.LayoutOrder=3; collectStatusLabel_BloodUI.Size=UDim2.new(1,0,0,16); collectStatusLabel_BloodUI.BackgroundTransparency=1; collectStatusLabel_BloodUI.Font=Enum.Font.Gotham; collectStatusLabel_BloodUI.Text="Auto Collect: Idle"; collectStatusLabel_BloodUI.TextColor3=bloodColors.TextSecondary; collectStatusLabel_BloodUI.TextSize=13; updateLoadingProgress(1)
    sellStatusLabel_BloodUI=Instance.new("TextLabel",mainInfoFrame); sellStatusLabel_BloodUI.Name="SellStatus_FromRemake"; sellStatusLabel_BloodUI.LayoutOrder=4; sellStatusLabel_BloodUI.Size=UDim2.new(1,0,0,16); sellStatusLabel_BloodUI.BackgroundTransparency=1; sellStatusLabel_BloodUI.Font=Enum.Font.Gotham; sellStatusLabel_BloodUI.Text="Auto Sell: Idle"; sellStatusLabel_BloodUI.TextColor3=bloodColors.TextSecondary; sellStatusLabel_BloodUI.TextSize=13; updateLoadingProgress(1)
    timerLabel_GAB=Instance.new("TextLabel",mainInfoFrame); timerLabel_GAB.Name="Timer_GAB"; timerLabel_GAB.LayoutOrder=5; timerLabel_GAB.Size=UDim2.new(1,0,0,16); timerLabel_GAB.BackgroundTransparency=1; timerLabel_GAB.Font=Enum.Font.GothamBold; timerLabel_GAB.Text="Time: 00:00:00"; timerLabel_GAB.TextColor3=bloodColors.TextSecondary; timerLabel_GAB.TextSize=13; mainInfoFrame.Visible=false; updateLoadingProgress(1)
    local rightPanelContentHeight_For_JobID_and_FPS = 80 + 32 + 10; local rightPanelFooterHeight_GAB_Original = 85; local rightPanelTotalHeight_GAB_Style = rightPanelContentHeight_For_JobID_and_FPS + rightPanelFooterHeight_GAB_Original + 20;
    rightSidePanel=Instance.new("Frame",screenGui); rightSidePanel.Name="KaitunControlPanel_GAB_Shell"; rightSidePanel.Size=UDim2.new(0,rightPanelWidth_GAB,0,rightPanelTotalHeight_GAB_Style); rightSidePanel.Position=UDim2.new(1,0,sidePanelVerticalPositionScale_GAB,0); rightSidePanel.AnchorPoint=Vector2.new(0,0.5); rightSidePanel.BackgroundColor3=bloodColors.Background; rightSidePanel.BackgroundTransparency=0.05; rightSidePanel.ZIndex=5; rightSidePanel.ClipsDescendants=true; Instance.new("UICorner",rightSidePanel).CornerRadius=UDim.new(0,10); local rspg=Instance.new("UIGradient",rightSidePanel); rspg.Color=ColorSequence.new({ColorSequenceKeypoint.new(0,bloodColors.BackgroundSlightlyLighter),ColorSequenceKeypoint.new(1,bloodColors.Background)}); rspg.Rotation=90; updateLoadingProgress(1)
    rightScrollingFrame_GAB=Instance.new("ScrollingFrame",rightSidePanel); rightScrollingFrame_GAB.Name="RightContentScroller_GAB_Shell"; rightScrollingFrame_GAB.Size=UDim2.new(1,0,0,rightPanelContentHeight_For_JobID_and_FPS); rightScrollingFrame_GAB.Position=UDim2.fromScale(0,0); rightScrollingFrame_GAB.BackgroundTransparency=1; rightScrollingFrame_GAB.ScrollBarImageColor3=bloodColors.ScrollBar; rightScrollingFrame_GAB.ScrollBarThickness=6; rightScrollingFrame_GAB.CanvasSize=UDim2.new(0,0,0,0); rightScrollingFrame_GAB.AutomaticCanvasSize=Enum.AutomaticSize.Y; local rspp=Instance.new("UIPadding",rightScrollingFrame_GAB); rspp.PaddingTop=UDim.new(0,10); rspp.PaddingBottom=UDim.new(0,0); rspp.PaddingLeft=UDim.new(0,10); rspp.PaddingRight=UDim.new(0,10); rspl_GAB=Instance.new("UIListLayout",rightScrollingFrame_GAB); rspl_GAB.Padding=UDim.new(0,8); rspl_GAB.SortOrder=Enum.SortOrder.LayoutOrder; rspl_GAB.HorizontalAlignment=Enum.HorizontalAlignment.Center; updateLoadingProgress(1)
    local JobIdInputFrame_Remake_Instance=Instance.new("Frame",rightScrollingFrame_GAB); JobIdInputFrame_Remake_Instance.Name="JobIdInputFrame_Remake"; JobIdInputFrame_Remake_Instance.LayoutOrder=1; JobIdInputFrame_Remake_Instance.Size=UDim2.new(1,0,0,80); JobIdInputFrame_Remake_Instance.BackgroundTransparency=1; local JobIdLayout_Remake=Instance.new("UIListLayout",JobIdInputFrame_Remake_Instance); JobIdLayout_Remake.FillDirection=Enum.FillDirection.Vertical; JobIdLayout_Remake.VerticalAlignment=Enum.VerticalAlignment.Center; JobIdLayout_Remake.HorizontalAlignment=Enum.HorizontalAlignment.Center; JobIdLayout_Remake.SortOrder=Enum.SortOrder.LayoutOrder; JobIdLayout_Remake.Padding=UDim.new(0,10);
    JobIdInputTextBox_Remake=Instance.new("TextBox",JobIdInputFrame_Remake_Instance); JobIdInputTextBox_Remake.Name="JobIdInputTextBox_Remake_UI"; JobIdInputTextBox_Remake.LayoutOrder=1; JobIdInputTextBox_Remake.Size=UDim2.new(1,-10,0,30); JobIdInputTextBox_Remake.BackgroundColor3=kaitunColors.ElementBackground; JobIdInputTextBox_Remake.BorderSizePixel=0; JobIdInputTextBox_Remake.Font=Enum.Font.Gotham; JobIdInputTextBox_Remake.Text=Config.LastEnteredJobId or ""; JobIdInputTextBox_Remake.PlaceholderText="Enter Job ID here..."; JobIdInputTextBox_Remake.TextColor3=kaitunColors.TextPrimary; JobIdInputTextBox_Remake.PlaceholderColor3=kaitunColors.TextSecondary; JobIdInputTextBox_Remake.TextSize=14; JobIdInputTextBox_Remake.ClearTextOnFocus=false; JobIdInputTextBox_Remake.TextXAlignment=Enum.TextXAlignment.Left; Instance.new("UICorner",JobIdInputTextBox_Remake).CornerRadius=UDim.new(0,6); local jip=Instance.new("UIPadding",JobIdInputTextBox_Remake); jip.PaddingLeft=UDim.new(0,10); jip.PaddingRight=UDim.new(0,10);
    JoinJobIdButton_Remake=Instance.new("TextButton",JobIdInputFrame_Remake_Instance); JoinJobIdButton_Remake.Name="JoinJobIdButton_Remake_UI"; JoinJobIdButton_Remake.LayoutOrder=2; JoinJobIdButton_Remake.Size=UDim2.new(0,120,0,30); JoinJobIdButton_Remake.BackgroundColor3=kaitunColors.ButtonJoin; JoinJobIdButton_Remake.BorderSizePixel=0; JoinJobIdButton_Remake.Font=Enum.Font.GothamBold; JoinJobIdButton_Remake.Text="Join Server"; JoinJobIdButton_Remake.TextColor3=Color3.fromRGB(255,255,255); JoinJobIdButton_Remake.TextSize=14; Instance.new("UICorner",JoinJobIdButton_Remake).CornerRadius=UDim.new(0,6); JoinJobIdButton_Remake.MouseEnter:Connect(function() TweenService:Create(JoinJobIdButton_Remake,TweenInfo.new(0.15),{BackgroundColor3=kaitunColors.ButtonJoinHover}):Play() end); JoinJobIdButton_Remake.MouseLeave:Connect(function() TweenService:Create(JoinJobIdButton_Remake,TweenInfo.new(0.15),{BackgroundColor3=kaitunColors.ButtonJoin}):Play() end); JoinJobIdButton_Remake.MouseButton1Click:Connect(teleportToJobId_Kaitun); if JobIdInputTextBox_Remake then JobIdInputTextBox_Remake.FocusLost:Connect(function() if JobIdInputTextBox_Remake.Text~=(Config.LastEnteredJobId or "") then Config.LastEnteredJobId=JobIdInputTextBox_Remake.Text; saveConfig_Kaitun() end end) end; updateLoadingProgress(1)
    local toggleFPSBoostButton = Instance.new("TextButton", rightScrollingFrame_GAB); toggleFPSBoostButton.Name = "ToggleFPSBoost"; toggleFPSBoostButton.LayoutOrder = 2; toggleFPSBoostButton.Size = UDim2.new(1, 0, 0, 32); toggleFPSBoostButton.Font = Enum.Font.GothamMedium; toggleFPSBoostButton.TextSize = 15; Instance.new("UICorner", toggleFPSBoostButton).CornerRadius = UDim.new(0, 6);
    local function updateFPSBoostButtonVisuals() if Config["Boost FPS"] then toggleFPSBoostButton.Text = "Boost FPS [ON]"; toggleFPSBoostButton.TextColor3 = toggleButtonColors.OnText; toggleFPSBoostButton.BackgroundColor3 = toggleButtonColors.OnBackground; else toggleFPSBoostButton.Text = "Boost FPS [OFF]"; toggleFPSBoostButton.TextColor3 = toggleButtonColors.OffText; toggleFPSBoostButton.BackgroundColor3 = toggleButtonColors.OffBackground; end end
    toggleFPSBoostButton.MouseButton1Click:Connect(function() Config["Boost FPS"] = not Config["Boost FPS"]; saveConfig_Kaitun(); updateFPSBoostButtonVisuals(); if Config["Boost FPS"] then startFPSBoostLoop() else stopFPSBoostLoop() end end); updateFPSBoostButtonVisuals(); updateLoadingProgress(1)
    rightPanelFooter_GAB=Instance.new("Frame",rightSidePanel); rightPanelFooter_GAB.Name="RightPanelFooter_GAB_Shell"; rightPanelFooter_GAB.Size=UDim2.new(1,0,0,rightPanelFooterHeight_GAB_Original); rightPanelFooter_GAB.Position=UDim2.new(0,0,1,-rightPanelFooterHeight_GAB_Original); rightPanelFooter_GAB.BackgroundTransparency=1; local rpfP=Instance.new("UIPadding",rightPanelFooter_GAB); rpfP.PaddingLeft=UDim.new(0,10); rpfP.PaddingRight=UDim.new(0,10); rpfP.PaddingTop=UDim.new(0,5); rpfP.PaddingBottom=UDim.new(0,5); local rpfL=Instance.new("UIListLayout",rightPanelFooter_GAB); rpfL.Padding=UDim.new(0,4); rpfL.SortOrder=Enum.SortOrder.LayoutOrder; rpfL.HorizontalAlignment=Enum.HorizontalAlignment.Center; updateLoadingProgress(1)
    local copyHubFrame_GAB=Instance.new("Frame",rightPanelFooter_GAB); copyHubFrame_GAB.Name="CopyHubControl_GAB"; copyHubFrame_GAB.BackgroundTransparency=1; copyHubFrame_GAB.Size=UDim2.new(1,0,0,35); copyHubFrame_GAB.LayoutOrder=1; local chl_GAB=Instance.new("UIListLayout",copyHubFrame_GAB); chl_GAB.FillDirection=Enum.FillDirection.Horizontal; chl_GAB.VerticalAlignment=Enum.VerticalAlignment.Center; chl_GAB.Padding=UDim.new(0,8); chl_GAB.HorizontalAlignment=Enum.HorizontalAlignment.Center;
    local copyHubImage_GAB=Instance.new("ImageLabel",copyHubFrame_GAB); copyHubImage_GAB.Name="HubImage_GAB"; copyHubImage_GAB.LayoutOrder=1; copyHubImage_GAB.Size=UDim2.new(0,28,0,28); copyHubImage_GAB.BackgroundTransparency=1; copyHubImage_GAB.Image="rbxassetid://91347148253026"; Instance.new("UICorner",copyHubImage_GAB).CornerRadius=UDim.new(1,0);
    local copyHubButton_GAB=Instance.new("TextButton",copyHubFrame_GAB); copyHubButton_GAB.Name="CopyButton_GAB"; copyHubButton_GAB.LayoutOrder=2; copyHubButton_GAB.Size=UDim2.new(0,140,1,0); copyHubButton_GAB.BackgroundColor3=bloodColors.Accent; copyHubButton_GAB.Font=Enum.Font.GothamBold; copyHubButton_GAB.Text="Copy Donald.gg"; copyHubButton_GAB.TextColor3=Color3.fromRGB(250,250,255); copyHubButton_GAB.TextSize=14; Instance.new("UICorner",copyHubButton_GAB).CornerRadius=UDim.new(0,6); copyHubButton_GAB.MouseButton1Click:Connect(function() local s=pcall(setclipboard,"https://discord.gg/5N7BqaT5df"); local ot,oc=copyHubButton_GAB.Text,copyHubButton_GAB.BackgroundColor3; copyHubButton_GAB.Text=s and "Copied!" or "Error!"; copyHubButton_GAB.BackgroundColor3=s and bloodColors.StatusOn or bloodColors.StatusOff; task.wait(1.5); copyHubButton_GAB.Text=ot; copyHubButton_GAB.BackgroundColor3=oc end);
    local devLabel1_GAB=Instance.new("TextLabel",rightPanelFooter_GAB); devLabel1_GAB.Name="DevLabel1_GAB"; devLabel1_GAB.LayoutOrder=2; devLabel1_GAB.Size=UDim2.new(1,0,0,14); devLabel1_GAB.BackgroundTransparency=1; devLabel1_GAB.Font=Enum.Font.Gotham; devLabel1_GAB.Text="Developer Script"; devLabel1_GAB.TextColor3=bloodColors.TextDisabled; devLabel1_GAB.TextSize=11; devLabel1_GAB.TextXAlignment=Enum.TextXAlignment.Center;
    local devLabel2_GAB=Instance.new("TextLabel",rightPanelFooter_GAB); devLabel2_GAB.Name="DevLabel2_GAB"; devLabel2_GAB.LayoutOrder=3; devLabel2_GAB.Size=UDim2.new(1,0,0,15); devLabel2_GAB.BackgroundTransparency=1; devLabel2_GAB.Font=Enum.Font.GothamMedium; devLabel2_GAB.Text="@Angeryy05"; devLabel2_GAB.TextColor3=bloodColors.TextSecondary; devLabel2_GAB.TextSize=12; devLabel2_GAB.TextXAlignment=Enum.TextXAlignment.Center;
    rightSidePanel.Visible=false; updateLoadingProgress(3)
    leftSidePanel=Instance.new("Frame",screenGui); leftSidePanel.Name="KaitunInfoPanel_GAB_Shell"; leftSidePanel.Size=UDim2.new(0,leftPanelWidth_GAB,0,0); leftSidePanel.AutomaticSize=Enum.AutomaticSize.Y; leftSidePanel.Position=UDim2.new(0,-leftPanelWidth_GAB,sidePanelVerticalPositionScale_GAB,0); leftSidePanel.AnchorPoint=Vector2.new(0,0.5); leftSidePanel.BackgroundColor3=bloodColors.Background; leftSidePanel.BackgroundTransparency=0.05; leftSidePanel.ZIndex=5; Instance.new("UICorner",leftSidePanel).CornerRadius=UDim.new(0,10); local lspg=Instance.new("UIGradient",leftSidePanel); lspg.Color=ColorSequence.new({ColorSequenceKeypoint.new(0,bloodColors.BackgroundSlightlyLighter),ColorSequenceKeypoint.new(1,bloodColors.Background)}); lspg.Rotation=90; updateLoadingProgress(1)
    leftScrollingFrame_GAB=Instance.new("ScrollingFrame",leftSidePanel); leftScrollingFrame_GAB.Name="LeftContentScroller_GAB_Shell"; leftScrollingFrame_GAB.Size=UDim2.new(1,0,0,380); leftScrollingFrame_GAB.BackgroundTransparency=1; leftScrollingFrame_GAB.ScrollBarImageColor3=bloodColors.ScrollBar; leftScrollingFrame_GAB.ScrollBarThickness=6; leftScrollingFrame_GAB.CanvasSize=UDim2.new(0,0,0,0); local lspp=Instance.new("UIPadding",leftScrollingFrame_GAB); lspp.PaddingTop=UDim.new(0,5); lspp.PaddingBottom=UDim.new(0,10); lspp.PaddingLeft=UDim.new(0,10); lspp.PaddingRight=UDim.new(0,10); lspl_GAB=Instance.new("UIListLayout",leftScrollingFrame_GAB); lspl_GAB.Padding=UDim.new(0,5); lspl_GAB.SortOrder=Enum.SortOrder.LayoutOrder; lspl_GAB.HorizontalAlignment=Enum.HorizontalAlignment.Left; updateLoadingProgress(1)
    local leftOrderCounter_GAB=1
    topInfoContainer_GAB=Instance.new("Frame",leftScrollingFrame_GAB); topInfoContainer_GAB.Name="TopInfoContainer_GAB"; topInfoContainer_GAB.BackgroundTransparency=1; topInfoContainer_GAB.Size=UDim2.new(1,0,0,0); topInfoContainer_GAB.AutomaticSize=Enum.AutomaticSize.Y; topInfoContainer_GAB.LayoutOrder=leftOrderCounter_GAB; leftOrderCounter_GAB=leftOrderCounter_GAB+1; local til=Instance.new("UIListLayout",topInfoContainer_GAB); til.Padding=UDim.new(0,4); til.HorizontalAlignment=Enum.HorizontalAlignment.Center; updateLoadingProgress(1)
    leftLogoImage_GAB=Instance.new("ImageLabel",topInfoContainer_GAB); leftLogoImage_GAB.Name="LeftLogo_GAB"; leftLogoImage_GAB.LayoutOrder=1; leftLogoImage_GAB.Size=UDim2.new(0,35,0,35); leftLogoImage_GAB.BackgroundTransparency=1; leftLogoImage_GAB.Image="rbxassetid://91347148253026"; leftLogoImage_GAB.ScaleType=Enum.ScaleType.Fit; Instance.new("UICorner",leftLogoImage_GAB).CornerRadius=UDim.new(1,0); updateLoadingProgress(1)
    leftDevLabel_GAB=Instance.new("TextLabel",topInfoContainer_GAB); leftDevLabel_GAB.Name="LeftDevLabel_GAB"; leftDevLabel_GAB.LayoutOrder=2; leftDevLabel_GAB.Size=UDim2.new(0.9,0,0,30); leftDevLabel_GAB.BackgroundTransparency=1; leftDevLabel_GAB.TextWrapped=true; leftDevLabel_GAB.TextXAlignment=Enum.TextXAlignment.Center; leftDevLabel_GAB.RichText=true; leftDevLabel_GAB.TextColor3=bloodColors.TextSecondary; leftDevLabel_GAB.Font=Enum.Font.Gotham; leftDevLabel_GAB.TextSize=12; local dc_gab,nc_gab=string.format("rgb(%d,%d,%d)",bloodColors.TextDisabled.r*255,bloodColors.TextDisabled.g*255,bloodColors.TextDisabled.b*255),string.format("rgb(%d,%d,%d)",bloodColors.TextSecondary.r*255,bloodColors.TextSecondary.g*255,bloodColors.TextSecondary.b*255); leftDevLabel_GAB.Text=string.format('<font size="11" color="%s">Developer Script</font>\n<font size="12" color="%s" face="GothamMedium">@Angeryy05</font>',dc_gab,nc_gab); updateLoadingProgress(1)
    topSeparator_GAB=Instance.new("Frame",leftScrollingFrame_GAB); topSeparator_GAB.Name="TopSeparator_GAB"; topSeparator_GAB.LayoutOrder=leftOrderCounter_GAB; leftOrderCounter_GAB=leftOrderCounter_GAB+1; topSeparator_GAB.Size=UDim2.new(1,-10,0,1); topSeparator_GAB.BackgroundColor3=bloodColors.ElementBackground; topSeparator_GAB.AnchorPoint=Vector2.new(0.5,0); topSeparator_GAB.Position=UDim2.new(0.5,0,0,0); updateLoadingProgress(1)
    local featureHeader_Left=Instance.new("TextLabel",leftScrollingFrame_GAB); featureHeader_Left.Name="FeatureStatusHeader_Left"; featureHeader_Left.LayoutOrder=leftOrderCounter_GAB; leftOrderCounter_GAB=leftOrderCounter_GAB+1; featureHeader_Left.Size=UDim2.new(1,0,0,22); featureHeader_Left.BackgroundTransparency=1; featureHeader_Left.Font=Enum.Font.GothamBold; featureHeader_Left.Text="Feature Status (from Config)"; featureHeader_Left.TextColor3=bloodColors.SectionHeader; featureHeader_Left.TextSize=14; featureHeader_Left.TextXAlignment=Enum.TextXAlignment.Center;
    createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Collect","AutoCollect",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress();
    createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Plant All Seed","AutoPlant",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress();
    createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Destroy","AutoDestroy",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress();
    createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Buy Seed","AutoBuySeed",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress();
    createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Buy Gear","AutoBuySelectedGear",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress(); createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Submit Pollinated","AutoSubmitPollinatedFruit",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress(); createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Auto Buy Honey Items","AutoBuyHoneyShopItems",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress(); createFeatureStatusDisplayRow_Remake(leftScrollingFrame_GAB,"Anti-AFK","Anti-AFK",leftOrderCounter_GAB); leftOrderCounter_GAB=leftOrderCounter_GAB+1; updateLoadingProgress();
    leftSidePanel.Visible=false; updateLoadingProgress(1)
    local bottomPanelWidth_GAB=380; local bottomPanelToggleButtonHeight_GAB=28; local bottomPanelContentHeight_GAB=180;
    bottomContentPanel=Instance.new("Frame",screenGui); bottomContentPanel.Name="KaitunBottomSelectionPanel_GAB_Shell"; bottomContentPanel.Size=UDim2.new(0,bottomPanelWidth_GAB,0,0); bottomContentPanel.AutomaticSize=Enum.AutomaticSize.Y; bottomContentPanel.AnchorPoint=Vector2.new(0.5,1); bottomContentPanel.BackgroundColor3=bloodColors.Background; bottomContentPanel.BackgroundTransparency=0.05; bottomContentPanel.ZIndex=5; bottomContentPanel.ClipsDescendants=true; Instance.new("UICorner",bottomContentPanel).CornerRadius=UDim.new(0,10); local bspg=Instance.new("UIGradient",bottomContentPanel); bspg.Color=ColorSequence.new({ColorSequenceKeypoint.new(0,bloodColors.BackgroundSlightlyLighter),ColorSequenceKeypoint.new(1,bloodColors.Background)}); bspg.Rotation=0; local bspp_b=Instance.new("UIPadding",bottomContentPanel); bspp_b.PaddingTop=UDim.new(0,10); bspp_b.PaddingBottom=UDim.new(0,10); bspp_b.PaddingLeft=UDim.new(0,10); bspp_b.PaddingRight=UDim.new(0,10); local bspl_b_m=Instance.new("UIListLayout",bottomContentPanel); bspl_b_m.Padding=UDim.new(0,6); bspl_b_m.SortOrder=Enum.SortOrder.LayoutOrder; bspl_b_m.HorizontalAlignment=Enum.HorizontalAlignment.Center; updateLoadingProgress(1)
    bottomPanelHeader_GAB=Instance.new("TextLabel",bottomContentPanel); bottomPanelHeader_GAB.Name="BottomPanelHeader_GAB"; bottomPanelHeader_GAB.LayoutOrder=1; bottomPanelHeader_GAB.Size=UDim2.new(1,0,0,22); bottomPanelHeader_GAB.BackgroundTransparency=1; bottomPanelHeader_GAB.Font=Enum.Font.GothamSemibold; bottomPanelHeader_GAB.Text="Configure Item Selections"; bottomPanelHeader_GAB.TextColor3=bloodColors.SectionHeader; bottomPanelHeader_GAB.TextSize=15; updateLoadingProgress(1)
    tabSelectorFrame_GAB=Instance.new("Frame",bottomContentPanel); tabSelectorFrame_GAB.Name="TabSelectorFrame_GAB"; tabSelectorFrame_GAB.LayoutOrder=2; tabSelectorFrame_GAB.Size=UDim2.new(1,0,0,28); tabSelectorFrame_GAB.BackgroundTransparency=1; local tl=Instance.new("UIListLayout",tabSelectorFrame_GAB); tl.FillDirection=Enum.FillDirection.Horizontal; tl.HorizontalAlignment=Enum.HorizontalAlignment.Center; tl.VerticalAlignment=Enum.VerticalAlignment.Center; tl.SortOrder=Enum.SortOrder.LayoutOrder; tl.Padding=UDim.new(0,5); updateLoadingProgress(1)
    local seedsSelTabBtn=Instance.new("TextButton",tabSelectorFrame_GAB); seedsSelTabBtn.Name="SeedsSelectionTab"; seedsSelTabBtn.Text="Seeds (Buy)"; seedsSelTabBtn.LayoutOrder=1; seedsSelTabBtn.Size=UDim2.new(0,80,1,0); seedsSelTabBtn.Font=Enum.Font.GothamMedium; seedsSelTabBtn.TextSize=12; Instance.new("UICorner",seedsSelTabBtn).CornerRadius=UDim.new(0,6);
    local gearSelTabBtn=Instance.new("TextButton",tabSelectorFrame_GAB); gearSelTabBtn.Name="GearSelectionTab"; gearSelTabBtn.Text="Gear (Buy)"; gearSelTabBtn.LayoutOrder=2; gearSelTabBtn.Size=UDim2.new(0,80,1,0); gearSelTabBtn.Font=Enum.Font.GothamMedium; gearSelTabBtn.TextSize=12; Instance.new("UICorner",gearSelTabBtn).CornerRadius=UDim.new(0,6);
    local honeySelTabBtn=Instance.new("TextButton",tabSelectorFrame_GAB); honeySelTabBtn.Name="HoneySelectionTab"; honeySelTabBtn.Text="Honey (Buy)"; honeySelTabBtn.LayoutOrder=3; honeySelTabBtn.Size=UDim2.new(0,80,1,0); honeySelTabBtn.Font=Enum.Font.GothamMedium; honeySelTabBtn.TextSize=12; Instance.new("UICorner",honeySelTabBtn).CornerRadius=UDim.new(0,6);
    local destroySelTabBtn=Instance.new("TextButton",tabSelectorFrame_GAB); destroySelTabBtn.Name="DestroySelectionTab"; destroySelTabBtn.Text="Destroy"; destroySelTabBtn.LayoutOrder=4; destroySelTabBtn.Size=UDim2.new(0,70,1,0); destroySelTabBtn.Font=Enum.Font.GothamMedium; destroySelTabBtn.TextSize=12; Instance.new("UICorner",destroySelTabBtn).CornerRadius=UDim.new(0,6);
    updateLoadingProgress(4)
    local seedSelScroll=Instance.new("ScrollingFrame",bottomContentPanel); seedSelScroll.Name="SeedSelScroll"; seedSelScroll.LayoutOrder=4; seedSelScroll.Size=UDim2.new(1,0,0,bottomPanelContentHeight_GAB); seedSelScroll.BackgroundTransparency=1; seedSelScroll.ScrollBarImageColor3=bloodColors.ScrollBar; seedSelScroll.ScrollBarThickness=6; seedSelScroll.AutomaticCanvasSize=Enum.AutomaticSize.Y; local sPad=Instance.new("UIPadding",seedSelScroll); sPad.PaddingLeft=UDim.new(0,5); sPad.PaddingRight=UDim.new(0,5); sPad.PaddingTop=UDim.new(0,2); sPad.PaddingBottom=UDim.new(0,2); local sList=Instance.new("UIListLayout",seedSelScroll); sList.Padding=UDim.new(0,3);
    local gearSelScroll=Instance.new("ScrollingFrame",bottomContentPanel); gearSelScroll.Name="GearSelScroll"; gearSelScroll.LayoutOrder=4; gearSelScroll.Size=UDim2.new(1,0,0,bottomPanelContentHeight_GAB); gearSelScroll.BackgroundTransparency=1; gearSelScroll.ScrollBarImageColor3=bloodColors.ScrollBar; gearSelScroll.ScrollBarThickness=6; gearSelScroll.AutomaticCanvasSize=Enum.AutomaticSize.Y; gearSelScroll.Visible=false; local gPad=Instance.new("UIPadding",gearSelScroll); gPad.PaddingLeft=UDim.new(0,5); gPad.PaddingRight=UDim.new(0,5); gPad.PaddingTop=UDim.new(0,2); gPad.PaddingBottom=UDim.new(0,2); local gList=Instance.new("UIListLayout",gearSelScroll); gList.Padding=UDim.new(0,3);
    local honeySelScroll=Instance.new("ScrollingFrame",bottomContentPanel); honeySelScroll.Name="HoneySelScroll"; honeySelScroll.LayoutOrder=4; honeySelScroll.Size=UDim2.new(1,0,0,bottomPanelContentHeight_GAB); honeySelScroll.BackgroundTransparency=1; honeySelScroll.ScrollBarImageColor3=bloodColors.ScrollBar; honeySelScroll.ScrollBarThickness=6; honeySelScroll.AutomaticCanvasSize=Enum.AutomaticSize.Y; honeySelScroll.Visible=false; local hPad=Instance.new("UIPadding",honeySelScroll); hPad.PaddingLeft=UDim.new(0,5); hPad.PaddingRight=UDim.new(0,5); hPad.PaddingTop=UDim.new(0,2); hPad.PaddingBottom=UDim.new(0,2); local hList=Instance.new("UIListLayout",honeySelScroll); hList.Padding=UDim.new(0,3);
    local destroySelScroll=Instance.new("ScrollingFrame",bottomContentPanel); destroySelScroll.Name="DestroySelScroll"; destroySelScroll.LayoutOrder=4; destroySelScroll.Size=UDim2.new(1,0,0,bottomPanelContentHeight_GAB); destroySelScroll.BackgroundTransparency=1; destroySelScroll.ScrollBarImageColor3=bloodColors.ScrollBar; destroySelScroll.ScrollBarThickness=6; destroySelScroll.AutomaticCanvasSize=Enum.AutomaticSize.Y; destroySelScroll.Visible=false; local dPad=Instance.new("UIPadding",destroySelScroll); dPad.PaddingLeft=UDim.new(0,5); dPad.PaddingRight=UDim.new(0,5); dPad.PaddingTop=UDim.new(0,2); dPad.PaddingBottom=UDim.new(0,2); local dList=Instance.new("UIListLayout",destroySelScroll); dList.Padding=UDim.new(0,3);
    updateLoadingProgress(4)
    local function setActiveSelTab(tName) seedsSelTabBtn.BackgroundColor3=tabColors.InactiveBackground; seedsSelTabBtn.TextColor3=tabColors.InactiveText; gearSelTabBtn.BackgroundColor3=tabColors.InactiveBackground; gearSelTabBtn.TextColor3=tabColors.InactiveText; honeySelTabBtn.BackgroundColor3=tabColors.InactiveBackground; honeySelTabBtn.TextColor3=tabColors.InactiveText; destroySelTabBtn.BackgroundColor3=tabColors.InactiveBackground; destroySelTabBtn.TextColor3=tabColors.InactiveText; seedSelScroll.Visible=false; gearSelScroll.Visible=false; honeySelScroll.Visible=false; destroySelScroll.Visible=false; if tName=="Seeds" then seedsSelTabBtn.BackgroundColor3=tabColors.ActiveBackground; seedsSelTabBtn.TextColor3=tabColors.ActiveText; seedSelScroll.Visible=true elseif tName=="Gear" then gearSelTabBtn.BackgroundColor3=tabColors.ActiveBackground; gearSelTabBtn.TextColor3=tabColors.ActiveText; gearSelScroll.Visible=true elseif tName=="Honey" then honeySelTabBtn.BackgroundColor3=tabColors.ActiveBackground; honeySelTabBtn.TextColor3=tabColors.ActiveText; honeySelScroll.Visible=true elseif tName=="Destroy" then destroySelTabBtn.BackgroundColor3=tabColors.ActiveBackground; destroySelTabBtn.TextColor3=tabColors.ActiveText; destroySelScroll.Visible=true end end
    seedsSelTabBtn.MouseButton1Click:Connect(function() setActiveSelTab("Seeds") end); gearSelTabBtn.MouseButton1Click:Connect(function() setActiveSelTab("Gear") end); honeySelTabBtn.MouseButton1Click:Connect(function() setActiveSelTab("Honey") end); destroySelTabBtn.MouseButton1Click:Connect(function() setActiveSelTab("Destroy") end)

    local seedBuyOrder = 0
    local autoBuySeedMasterToggleBtn = Instance.new("TextButton", seedSelScroll)
    autoBuySeedMasterToggleBtn.Name = "AutoBuySeedToggle"
    autoBuySeedMasterToggleBtn.LayoutOrder = seedBuyOrder; seedBuyOrder = seedBuyOrder + 1
    autoBuySeedMasterToggleBtn.Size = UDim2.new(1, -4, 0, 26)
    autoBuySeedMasterToggleBtn.Font = Enum.Font.GothamMedium
    autoBuySeedMasterToggleBtn.TextSize = 13
    Instance.new("UICorner", autoBuySeedMasterToggleBtn).CornerRadius = UDim.new(0, 5)
    local function updateAutoBuySeedMasterToggleVisuals()
        if Config.AutoBuySeed then
            autoBuySeedMasterToggleBtn.Text = "Auto Buy Seed [ON]"
            autoBuySeedMasterToggleBtn.BackgroundColor3 = kaitunColors.ElementHover
            autoBuySeedMasterToggleBtn.TextColor3 = kaitunColors.StatusOn
        else
            autoBuySeedMasterToggleBtn.Text = "Auto Buy Seed [OFF]"
            autoBuySeedMasterToggleBtn.BackgroundColor3 = kaitunColors.ElementBackground
            autoBuySeedMasterToggleBtn.TextColor3 = kaitunColors.StatusOff
        end
    end
    autoBuySeedMasterToggleBtn.MouseButton1Click:Connect(function()
        Config.AutoBuySeed = not Config.AutoBuySeed
        updateAutoBuySeedMasterToggleVisuals()
        saveConfig_Kaitun()
        updateFeatureStatusDisplays_Remake()
        if Config.AutoBuySeed then AutoBuySeedModule_Kaitun.start() else AutoBuySeedModule_Kaitun.stop() end
    end)
    updateAutoBuySeedMasterToggleVisuals()

    local useCustomDelayToggleBtn = Instance.new("TextButton", seedSelScroll)
    useCustomDelayToggleBtn.Name = "UseCustomBuyDelayToggle"
    useCustomDelayToggleBtn.LayoutOrder = seedBuyOrder; seedBuyOrder = seedBuyOrder + 1
    useCustomDelayToggleBtn.Size = UDim2.new(1, -4, 0, 22)
    useCustomDelayToggleBtn.Font = Enum.Font.Gotham
    useCustomDelayToggleBtn.TextSize = 12
    Instance.new("UICorner", useCustomDelayToggleBtn).CornerRadius = UDim.new(0, 4)
    local function updateUseCustomDelayVisuals()
        if Config.AutoBuySeed_UseCustomDelay then
            useCustomDelayToggleBtn.Text = "Use Custom Delay [ON]"
            useCustomDelayToggleBtn.BackgroundColor3 = kaitunColors.ElementHover
            useCustomDelayToggleBtn.TextColor3 = kaitunColors.StatusOn
        else
            useCustomDelayToggleBtn.Text = "Use Custom Delay [OFF]"
            useCustomDelayToggleBtn.BackgroundColor3 = kaitunColors.ElementBackground
            useCustomDelayToggleBtn.TextColor3 = kaitunColors.StatusOff
        end
    end
    useCustomDelayToggleBtn.MouseButton1Click:Connect(function()
        Config.AutoBuySeed_UseCustomDelay = not Config.AutoBuySeed_UseCustomDelay
        updateUseCustomDelayVisuals()
        saveConfig_Kaitun()
    end)
    updateUseCustomDelayVisuals()

    local customDelayInputBox = Instance.new("TextBox", seedSelScroll)
    customDelayInputBox.Name = "CustomBuyDelayInput"
    customDelayInputBox.LayoutOrder = seedBuyOrder; seedBuyOrder = seedBuyOrder + 1
    customDelayInputBox.Size = UDim2.new(1, -4, 0, 24)
    customDelayInputBox.Font = Enum.Font.Gotham
    customDelayInputBox.TextSize = 12
    customDelayInputBox.BackgroundColor3 = kaitunColors.ElementBackground
    customDelayInputBox.TextColor3 = kaitunColors.TextPrimary
    customDelayInputBox.PlaceholderText = "Delay (s), e.g. 0.5"
    customDelayInputBox.PlaceholderColor3 = kaitunColors.TextSecondary
    customDelayInputBox.Text = tostring(Config.AutoBuySeed_CustomDelaySeconds)
    customDelayInputBox.ClearTextOnFocus = false
    Instance.new("UICorner", customDelayInputBox).CornerRadius = UDim.new(0,4)
    local cDip = Instance.new("UIPadding",customDelayInputBox); cDip.PaddingLeft=UDim.new(0,8); cDip.PaddingRight=UDim.new(0,8)
    customDelayInputBox.FocusLost:Connect(function(enterPressed)
        local num = tonumber(customDelayInputBox.Text)
        if num and num > 0 then
            Config.AutoBuySeed_CustomDelaySeconds = num
        else
            customDelayInputBox.Text = tostring(Config.AutoBuySeed_CustomDelaySeconds)
        end
        saveConfig_Kaitun()
    end)
    updateLoadingProgress(3)

    local function createSeedItemToggleBtn_New(p, iN, o)
        local b = Instance.new("TextButton", p)
        b.Name = iN:gsub("%s+", "") .. "Toggle_SeedBuy"
        b.LayoutOrder = o
        b.Size = UDim2.new(1, -4, 0, 22)
        b.Font = Enum.Font.Gotham
        b.TextSize = 12
        Instance.new("UICorner", b).CornerRadius = UDim.new(0, 4)
        local function updVis()
            if Config.SelectSeed[iN] then
                b.Text = iN .. " [ON]"
                b.BackgroundColor3 = kaitunColors.ElementHover
                b.TextColor3 = kaitunColors.StatusOn
            else
                b.Text = iN .. " [OFF]"
                b.BackgroundColor3 = kaitunColors.ElementBackground
                b.TextColor3 = kaitunColors.StatusOff
            end
        end
        b.MouseButton1Click:Connect(function()
            Config.SelectSeed[iN] = not Config.SelectSeed[iN]
            updVis()
            saveConfig_Kaitun()
        end)
        updVis()
        return b
    end

    for _, sN in ipairs(SORTED_SEED_SHOP_ITEM_KEYS_KAITUN) do createSeedItemToggleBtn_New(seedSelScroll,sN,seedBuyOrder); seedBuyOrder = seedBuyOrder + 1; updateLoadingProgress() end

local function createGenericItemToggleBtn(p,iN,cT_configTable,cK_configKey,o) if not cT_configTable then cT_configTable={} end if cT_configTable[cK_configKey]==nil then cT_configTable[cK_configKey]=false end local b=Instance.new("TextButton",p); b.Name=iN:gsub("%s+","").."Toggle"; b.LayoutOrder=o; b.Size=UDim2.new(1,-4,0,22); b.Font=Enum.Font.Gotham; b.TextSize=12; Instance.new("UICorner",b).CornerRadius=UDim.new(0,4); local function updVis() if cT_configTable[cK_configKey] then b.Text=iN.." [ON]"; b.BackgroundColor3=kaitunColors.ElementHover; b.TextColor3=kaitunColors.StatusOn else b.Text=iN.." [OFF]"; b.BackgroundColor3=kaitunColors.ElementBackground; b.TextColor3=kaitunColors.StatusOff end end b.MouseButton1Click:Connect(function() cT_configTable[cK_configKey]=not cT_configTable[cK_configKey]; updVis(); saveConfig_Kaitun() end) updVis(); return b end
    local gO=0; for gN,_ in pairs(SHOP_TOOL_MAP_KAITUN) do gO=gO+1; createGenericItemToggleBtn(gearSelScroll,gN,Config.SelectedGearToBuy,gN,gO); updateLoadingProgress() end
    local hO=0; for _,iN in ipairs(HONEY_EVENT_ITEM_NAMES_KAITUN) do hO=hO+1; createGenericItemToggleBtn(honeySelScroll,iN,Config.SelectedHoneyShopItemsToBuy,iN,hO); updateLoadingProgress() end
    local dO=0; for pN,_ in pairs(DonaldConfigDefaults.PlantsToDestroy) do createGenericItemToggleBtn(destroySelScroll,pN,Config.PlantsToDestroy,pN,dO); updateLoadingProgress() end
    setActiveSelTab("Seeds"); bottomContentPanel.Visible=false; updateLoadingProgress(1)

    rightToggleButton_GAB=Instance.new("TextButton",screenGui); rightToggleButton_GAB.Name="ToggleControlPanelButton_GAB"; rightToggleButton_GAB.Size=UDim2.new(0,28,0,55); rightToggleButton_GAB.AnchorPoint=Vector2.new(1,0.5); rightToggleButton_GAB.Position=UDim2.new(1,-5,sidePanelVerticalPositionScale_GAB,0); rightToggleButton_GAB.BackgroundColor3=bloodColors.ElementBackground; rightToggleButton_GAB.TextColor3=bloodColors.TextSecondary; rightToggleButton_GAB.Text="<"; rightToggleButton_GAB.Font=Enum.Font.GothamBold; rightToggleButton_GAB.TextSize=22; rightToggleButton_GAB.ZIndex=6; Instance.new("UICorner",rightToggleButton_GAB).CornerRadius=UDim.new(0,8); rightToggleButton_GAB.MouseButton1Click:Connect(function() rightPanelOpenState_GAB=not rightPanelOpenState_GAB; local pPos,bPos; if rightPanelOpenState_GAB then rightToggleButton_GAB.Text=">"; pPos=UDim2.new(1,-rightPanelWidth_GAB,sidePanelVerticalPositionScale_GAB,0); bPos=UDim2.new(1,-rightPanelWidth_GAB-5,sidePanelVerticalPositionScale_GAB,0); dimmingFrame.Visible=true else rightToggleButton_GAB.Text="<"; pPos=UDim2.new(1,0,sidePanelVerticalPositionScale_GAB,0); bPos=UDim2.new(1,-5,sidePanelVerticalPositionScale_GAB,0); if not leftPanelOpen_GAB and not bottomPanelOpen_GAB then dimmingFrame.Visible=false end end; TweenService:Create(rightSidePanel,rightPanelAnimInfo_GAB,{Position=pPos}):Play(); TweenService:Create(rightToggleButton_GAB,rightPanelAnimInfo_GAB,{Position=bPos}):Play() end); updateLoadingProgress(1)
    leftToggleButton_GAB=Instance.new("TextButton",screenGui); leftToggleButton_GAB.Name="ToggleInfoPanelButton_GAB"; leftToggleButton_GAB.Size=UDim2.new(0,28,0,55); leftToggleButton_GAB.AnchorPoint=Vector2.new(0,0.5); leftToggleButton_GAB.Position=UDim2.new(0,5,sidePanelVerticalPositionScale_GAB,0); leftToggleButton_GAB.BackgroundColor3=bloodColors.ElementBackground; leftToggleButton_GAB.TextColor3=bloodColors.TextSecondary; leftToggleButton_GAB.Text=">"; leftToggleButton_GAB.Font=Enum.Font.GothamBold; leftToggleButton_GAB.TextSize=22; leftToggleButton_GAB.ZIndex=6; Instance.new("UICorner",leftToggleButton_GAB).CornerRadius=UDim.new(0,8); leftToggleButton_GAB.MouseButton1Click:Connect(function() leftPanelOpen_GAB=not leftPanelOpen_GAB; local pPos,bPos; if leftPanelOpen_GAB then leftToggleButton_GAB.Text="<"; pPos=UDim2.new(0,0,sidePanelVerticalPositionScale_GAB,0); bPos=UDim2.new(0,leftPanelWidth_GAB+5,sidePanelVerticalPositionScale_GAB,0); dimmingFrame.Visible=true else leftToggleButton_GAB.Text=">"; pPos=UDim2.new(0,-leftPanelWidth_GAB,sidePanelVerticalPositionScale_GAB,0); bPos=UDim2.new(0,5,sidePanelVerticalPositionScale_GAB,0); if not rightPanelOpenState_GAB and not bottomPanelOpen_GAB then dimmingFrame.Visible=false end end; TweenService:Create(leftSidePanel,rightPanelAnimInfo_GAB,{Position=pPos}):Play(); TweenService:Create(leftToggleButton_GAB,rightPanelAnimInfo_GAB,{Position=bPos}):Play() end); updateLoadingProgress(1)
    bottomToggleButton_GAB=Instance.new("TextButton",screenGui); bottomToggleButton_GAB.Name="ToggleBottomPanelButton_GAB"; bottomToggleButton_GAB.Size=UDim2.new(0,80,0,bottomPanelToggleButtonHeight_GAB); bottomToggleButton_GAB.AnchorPoint=Vector2.new(0.5,1); bottomToggleButton_GAB.Position=UDim2.new(0.5,0,1,-5); bottomToggleButton_GAB.BackgroundColor3=bloodColors.ElementBackground; bottomToggleButton_GAB.TextColor3=bloodColors.TextSecondary; bottomToggleButton_GAB.Text="^"; bottomToggleButton_GAB.Font=Enum.Font.GothamBold; bottomToggleButton_GAB.TextSize=18; bottomToggleButton_GAB.ZIndex=6; Instance.new("UICorner",bottomToggleButton_GAB).CornerRadius=UDim.new(0,8); bottomToggleButton_GAB.MouseButton1Click:Connect(function() bottomPanelOpen_GAB=not bottomPanelOpen_GAB; local tPP,tMIP; if bottomPanelOpen_GAB then bottomToggleButton_GAB.Text="v"; tPP=UDim2.new(0.5,0,1,-bottomToggleButton_GAB.AbsoluteSize.Y-10); tMIP=UDim2.new(0.5,0,mainInfoFrameOriginalPosition_GAB.Y.Scale,mainInfoFrameOriginalPosition_GAB.Y.Offset-(bottomContentPanel.AbsoluteSize.Y+bottomToggleButton_GAB.AbsoluteSize.Y+15)); dimmingFrame.Visible=true else bottomToggleButton_GAB.Text="^"; tPP=UDim2.new(0.5,0,1,bottomContentPanel.AbsoluteSize.Y+20); tMIP=mainInfoFrameOriginalPosition_GAB; if not rightPanelOpenState_GAB and not leftPanelOpen_GAB then dimmingFrame.Visible=false end end; TweenService:Create(bottomContentPanel,rightPanelAnimInfo_GAB,{Position=tPP}):Play(); TweenService:Create(mainInfoFrame,rightPanelAnimInfo_GAB,{Position=tMIP}):Play() end); updateLoadingProgress(1)
    rightToggleButton_GAB.Visible=false; leftToggleButton_GAB.Visible=false; bottomToggleButton_GAB.Visible=false; mainInfoFrame.Visible=true; rightSidePanel.Visible=true; leftSidePanel.Visible=true; bottomContentPanel.Visible=true; rightToggleButton_GAB.Visible=true; leftToggleButton_GAB.Visible=true; bottomToggleButton_GAB.Visible=true;
    if rightSidePanel and rightToggleButton_GAB then rightPanelOpenState_GAB=false; rightToggleButton_GAB.Text="<"; rightSidePanel.Position=UDim2.new(1,0,sidePanelVerticalPositionScale_GAB,0); rightToggleButton_GAB.Position=UDim2.new(1,-5,sidePanelVerticalPositionScale_GAB,0) end; updateLoadingProgress(1)
    if leftSidePanel and leftToggleButton_GAB then leftPanelOpen_GAB=false; leftToggleButton_GAB.Text=">"; leftSidePanel.Position=UDim2.new(0,-leftPanelWidth_GAB,sidePanelVerticalPositionScale_GAB,0); leftToggleButton_GAB.Position=UDim2.new(0,5,sidePanelVerticalPositionScale_GAB,0) end; updateLoadingProgress(1)
    if bottomContentPanel and bottomToggleButton_GAB then bottomPanelOpen_GAB=false; bottomToggleButton_GAB.Text="^"; task.wait(); bottomContentPanel.Position=UDim2.new(0.5,0,1,bottomContentPanel.AbsoluteSize.Y+20); mainInfoFrame.Position=mainInfoFrameOriginalPosition_GAB end; updateLoadingProgress(1); dimmingFrame.Visible=false; updateLoadingProgress(1)

    totalLoadTasks = currentLoadProgress
    updateFeatureStatusDisplays_Remake();
    if rspl_GAB and rspl_GAB.Parent then task.wait(0.05); local nCY=rspl_GAB.AbsoluteContentSize.Y if nCY>0 and rightScrollingFrame_GAB.CanvasSize.Y.Offset~=(nCY+8) then rightScrollingFrame_GAB.CanvasSize=UDim2.new(0,0,0,nCY+8) end end

    local finalP=math.floor((currentLoadProgress/totalLoadTasks)*100); if finalP<100 then loadingProgressText.Text="100%"; TweenService:Create(loadingProgressBarFill,TweenInfo.new(0.1),{Size=UDim2.new(1,0,1,0)}):Play(); task.wait(0.1) end
    loadingStatusLabel.Text="Loading Complete!"; task.wait(0.5); TweenService:Create(loadingScreenFrame,TweenInfo.new(0.5),{BackgroundTransparency=1}):Play(); TweenService:Create(loadingLogoImage,TweenInfo.new(0.5),{ImageTransparency=1}):Play(); TweenService:Create(loadingStatusLabel,TweenInfo.new(0.5),{TextTransparency=1}):Play(); TweenService:Create(loadingProgressBarBackground,TweenInfo.new(0.5),{BackgroundTransparency=1}):Play(); TweenService:Create(loadingProgressText,TweenInfo.new(0.5),{TextTransparency=1}):Play(); task.wait(0.5); loadingScreenFrame:Destroy(); isLoadingComplete=true
    print("Donald.gg Kaitun UI Initialized.")
    updateFeatureStatusDisplays_Remake()
    if Config["Auto Max Zoom"] then local oMZ=LocalPlayer.CameraMinZoomDistance; LocalPlayer.CameraMinZoomDistance=LocalPlayer.CameraMaxZoomDistance; print("Donald.gg Kaitun: Initial max zoom."); if not Config["Auto Max Zoom"] then task.wait(0.2); LocalPlayer.CameraMinZoomDistance=oMZ; print("Donald.gg Kaitun: Max zoom reverted by config.") end end
    local sT=tick(); task.spawn(function() print("Timer loop started. Waiting for isLoadingComplete...") while not isLoadingComplete do task.wait(0.1) end; print("isLoadingComplete is true. Starting timer updates.") if timerLabel_GAB then print("timerLabel_GAB is valid at start of loop") else print("timerLabel_GAB is NIL at start of loop") end while screenGui and screenGui.Parent do if timerLabel_GAB and timerLabel_GAB.Parent then timerLabel_GAB.Text="Time: "..formatTime(tick()-sT) end; task.wait(1) end print("Timer loop ended.") end)

    if Config.AutoBuySeed then AutoBuySeedModule_Kaitun.start() end
    if Config.AutoBuySelectedGear then startAutoBuySelectedGearLoop_Kaitun() end; if Config.AutoSubmitPollinatedFruit then startAutoSubmitPollinatedLoop_Kaitun() end; if Config.AutoBuyHoneyShopItems then startAutoBuyHoneyShopItemsLoop_Kaitun() end; if Config["Anti-AFK"] then startAntiAFK_Kaitun() end; if JobIdInputTextBox_Remake and Config.LastEnteredJobId then JobIdInputTextBox_Remake.Text=Config.LastEnteredJobId end; if Config["Boost FPS"] then startFPSBoostLoop() end
    updateActionStatus("Script loaded and running.")
end)()

local MyFarm
local function findFarm()
    if not isLoadingComplete then return false end
    if Workspace:FindFirstChild("Farm") then
        for _,fI in pairs(Workspace.Farm:GetChildren()) do
            if fI.Name=="Farm" and fI:FindFirstChild("Important") then
                local oV=fI.Important.Data:FindFirstChild("Owner")
                if oV and oV.Value==LocalPlayer.Name then
                    MyFarm=fI;
                    if not(Config.AutoBuySeed and seedAutoBuyLoopThread_Kaitun)and not(Config.AutoBuySelectedGear and autoBuySelectedGearThread_Kaitun)and not(Config.AutoSubmitPollinatedFruit and autoSubmitPollinatedThread_Kaitun)and not(Config.AutoBuyHoneyShopItems and autoBuyHoneyShopItemsThread_Kaitun)then

                    end
                    return true
                end
            end
        end
    end
    if not(Config.AutoBuySeed and seedAutoBuyLoopThread_Kaitun)and not(Config.AutoBuySelectedGear and autoBuySelectedGearThread_Kaitun)and not(Config.AutoSubmitPollinatedFruit and autoSubmitPollinatedThread_Kaitun)and not(Config.AutoBuyHoneyShopItems and autoBuyHoneyShopItemsThread_Kaitun)then

    end
    return false
end

local function randompt_for_trongrau_plant(part)
    local size = part.Size
    local localX = (math.random() - 0.5) * size.X
    local localY = (math.random() - 0.5) * size.Y
    local localZ = (math.random() - 0.5) * size.Z
    local localOffset = Vector3.new(localX, localY, localZ)
    local worldPosition = part.CFrame:PointToWorldSpace(localOffset)
    local rotX = math.rad(math.random(0, 360))
    local rotY = math.rad(math.random(0, 360))
    local rotZ = math.rad(math.random(0, 360))
    local randomRotation = CFrame.Angles(rotX, rotY, rotZ)
    return CFrame.new(worldPosition) * randomRotation
end

local format_for_trongrau_plant = {
	["seed_in_backpack"] = {
		["name"] = function(tnhuw)
			local t = string.gsub(tnhuw, "%A+%[(.-)]", "")
			return t:gsub(" Seed", "")
		end,
	}
}

local function plant_original_trongrau(seedToolFullName)
    print("[🌱 Debug] Bắt đầu plant:", seedToolFullName)

    if not MyFarm or not MyFarm.Parent then
        warn("[❌] MyFarm chưa có hoặc đã bị xóa.")
        return false
    end

    Character = getCharacter(); Humanoid = getHumanoid(Character); HumanoidRootPart = getHumanoidRootPart(Character)
    if not Character or not Humanoid or not HumanoidRootPart then
        warn("[❌] Không lấy được Character / Humanoid / RootPart.")
        return false
    end

    if Character:FindFirstChild(seedToolFullName) then
        print("[🧤] Seed đang cầm:", seedToolFullName)

        local plantLocations = MyFarm.Important:FindFirstChild("Plant_Locations")
        if not plantLocations then
            warn("[⚠️] Không tìm thấy Plant_Locations.")
            updateActionStatus("Auto Plant (trongrau): Plant_Locations not found.")
            return false
        end

        local plots = plantLocations:GetChildren()
        print("[📍] Số plot tìm được:", #plots)
        if #plots == 0 then
            updateActionStatus("Auto Plant (trongrau): No plots available.")
            return false
        end

        if #plots < 2 then
            if #plots == 1 then
                print("[📍] Chỉ có 1 plot, sẽ chọn plot đó.")
            else
                warn("[⚠️] Không đủ plot.")
                return false
            end
        end

        local targetPlotPart = (#plots == 1) and plots[1] or plots[math.random(1, 2)]
        print("[📍] Chọn plot:", targetPlotPart.Name)

        local cf = randompt_for_trongrau_plant(targetPlotPart)
        print(string.format("[📦] Dịch chuyển tới: (%.1f, %.1f, %.1f)", cf.X, cf.Y, cf.Z))
        HumanoidRootPart.CFrame = cf * CFrame.new(0, 10, 0)

        local seedNameForEvent = format_for_trongrau_plant["seed_in_backpack"]["name"](seedToolFullName)
        print("[📨] Tên gửi remote:", seedNameForEvent)

        if not (Config.AutoBuySeed and seedAutoBuyLoopThread_Kaitun) and
           not (Config.AutoBuySelectedGear and autoBuySelectedGearThread_Kaitun) and
           not (Config.AutoSubmitPollinatedFruit and autoSubmitPollinatedThread_Kaitun) and
           not (Config.AutoBuyHoneyShopItems and autoBuyHoneyShopItemsThread_Kaitun) then
            updateActionStatus(string.format("Auto Plant (trongrau): Planting %s...", seedNameForEvent))
        end

        if GameEvents then
            local plantRemoteEvent = GameEvents:FindFirstChild("Plant_RE")
            if plantRemoteEvent and plantRemoteEvent:IsA("RemoteEvent") then
                print("[✅] Gửi Plant_RE")
                plantRemoteEvent:FireServer(Vector3.new(cf.X, cf.Y, cf.Z), seedNameForEvent)
                task.wait(0.1)
                return true
            else
                warn("[❌] Không tìm thấy Plant_RE.")
                updateActionStatus("Auto Plant (trongrau): Plant_RE not found.")
            end
        else
            warn("[❌] Không tìm thấy GameEvents.")
            updateActionStatus("Auto Plant (trongrau): GameEvents not found.")
        end

        return false

    elseif Backpack:FindFirstChild(seedToolFullName) then
        print("[🎒] Seed nằm trong backpack:", seedToolFullName)
        Humanoid:EquipTool(Backpack:FindFirstChild(seedToolFullName))
        task.wait(0.2) -- tăng nhẹ thời gian
        print("[🧤] Đã equip, gọi lại chính mình.")
        return plant_original_trongrau(seedToolFullName)
    else
        warn("[❓] Không tìm thấy seed:", seedToolFullName)
    end

    return false
end


local function checkhasseed_for_trongrau_plant()
    Character = getCharacter(); Humanoid = getHumanoid(Character); Backpack = LocalPlayer:WaitForChild("Backpack")
	if not Character or not Backpack then return nil end
	for i, v in pairs(Character:GetChildren()) do
		if string.find(v.Name:lower(), "seed") then
			return v
		end
	end
	for i, v in pairs(Backpack:GetChildren()) do
		if string.find(v.Name:lower(), "seed") then
			return v
		end
	end
	return nil
end

function findPlantToDestroy() if not MyFarm or not MyFarm.Parent then return nil end local pP=MyFarm.Important:FindFirstChild("Plants_Physical") if not pP then return nil end local dL=Config.PlantsToDestroy or {} for _,pI in pairs(pP:GetChildren()) do if dL[pI.Name]==true then return pI end end return nil end
function getFruitCount()
    local count = 0
    if Backpack then
        for _, item in pairs(Backpack:GetChildren()) do
            if item:IsA("Tool") and not string.find(item.Name:lower(), "seed") and not string.find(item.Name:lower(), "shovel") and not string.find(item.Name:lower(), "pollinated") then
                count = count + 1
                print("[Debug] Counted fruit in Backpack:", item.Name)
            end
        end
    end
    if Character then
        for _, item in pairs(Character:GetChildren()) do
            if item:IsA("Tool") and not string.find(item.Name:lower(), "seed") and not string.find(item.Name:lower(), "shovel") and not string.find(item.Name:lower(), "pollinated") then
                count = count + 1
                print("[Debug] Counted fruit in Character:", item.Name)
            end
        end
    end
    print("[Debug] Total fruit count:", count)
    return count
end
local AutoCollectModule_New = {}
local isCollectingActive_New, collectingLoopThread_New = false, nil
local eKeyHoldingThread_New, isEKeyHoldingForCollectActive_New = nil, false
local COLLECTION_CYCLE_DELAY_NEW = 0.1
local PAUSE_AFTER_PROMPT_MODIFICATION_NEW = 0.05
local E_KEY_HOLD_INTERVAL_NEW = 0.03

local function getOwnedFarmPlots_New()
    local plots = {}
    local farmFolder = Workspace:FindFirstChild("Farm")
    local localPlayerName = LocalPlayer.Name
    if not farmFolder or not localPlayerName then return plots end

    for _, farmPlot in ipairs(farmFolder:GetChildren()) do
        local importantFolder = farmPlot:FindFirstChild("Important", false)
        local dataFolder = importantFolder and importantFolder:FindFirstChild("Data", false)
        local ownerValue = dataFolder and dataFolder:FindFirstChild("Owner", false)
        local isOwned = false
        if ownerValue then
            if ownerValue:IsA("ObjectValue") and ownerValue.Value and ownerValue.Value:IsA("Player") and ownerValue.Value.Name == localPlayerName then
                isOwned = true
            elseif ownerValue:IsA("StringValue") and ownerValue.Value == localPlayerName then
                isOwned = true
            end
        end
        if isOwned then table.insert(plots, farmPlot) end
    end
    return plots
end

local function getHarvestablePlants_New()
    local harvestables = {}
    local ownedPlots = getOwnedFarmPlots_New()
    for _, farmPlot in ipairs(ownedPlots) do
        local importantFolder = farmPlot:FindFirstChild("Important")
        if importantFolder then
            local plantsPhysicalFolder = importantFolder:FindFirstChild("Plants_Physical")
            if plantsPhysicalFolder then
                for _, plantInstance in ipairs(plantsPhysicalFolder:GetChildren()) do
                    table.insert(harvestables, plantInstance)
                end
            end
        end
    end
    return harvestables
end

local function getabcishavestable_New()
    local lol = {}
    if not CollectionService then warn("Donald.gg (AutoCollectNew): CollectionService not available."); return lol end
    local taggedInstances = CollectionService:GetTagged("CollectPrompt")

    for _, vInstance in ipairs(taggedInstances) do
        local importantAncestor = vInstance:FindFirstAncestor("Important")
        if importantAncestor then
            local dataFolder = importantAncestor:FindFirstChild("Data")
            if dataFolder then
                local ownerValue = dataFolder:FindFirstChild("Owner")
                local isOwned = false
                if ownerValue then
                    if ownerValue:IsA("ObjectValue") and ownerValue.Value and ownerValue.Value == LocalPlayer then
                        isOwned = true
                    elseif ownerValue:IsA("StringValue") and ownerValue.Value == LocalPlayer.Name then
                        isOwned = true
                    end
                end
                if isOwned then
                    if vInstance.Parent and vInstance.Parent.Parent then
                        table.insert(lol, vInstance.Parent.Parent)
                    end
                end
            end
        end
    end
    return lol
end

function AutoCollectModule_New.startEKeyHolding()
    if isEKeyHoldingForCollectActive_New then return end; isEKeyHoldingForCollectActive_New = true
    if eKeyHoldingThread_New then task.cancel(eKeyHoldingThread_New); eKeyHoldingThread_New = nil end
    eKeyHoldingThread_New = task.spawn(function()
        while isEKeyHoldingForCollectActive_New and Config.AutoCollect and VirtualInputManager do
            pcall(VirtualInputManager.SendKeyEvent, VirtualInputManager, true, Enum.KeyCode.E, false, game)
            task.wait(E_KEY_HOLD_INTERVAL_NEW)
        end
        if VirtualInputManager then
            pcall(VirtualInputManager.SendKeyEvent, VirtualInputManager, false, Enum.KeyCode.E, false, game)
        end
        isEKeyHoldingForCollectActive_New = false; eKeyHoldingThread_New = nil
    end)
end
function AutoCollectModule_New.stopEKeyHolding()
    if not isEKeyHoldingForCollectActive_New then return end; isEKeyHoldingForCollectActive_New = false
end

function AutoCollectModule_New.start()
    if isCollectingActive_New then return end; isCollectingActive_New = true
    AutoCollectModule_New.startEKeyHolding()
    if collectingLoopThread_New then task.cancel(collectingLoopThread_New) end
    collectingLoopThread_New = task.spawn(function()
        while isCollectingActive_New and Config.AutoCollect and isLoadingComplete do
            local char = getCharacter()
            local canProceed = true

            if not char or not char.Parent then task.wait(1); canProceed = false end
            if canProceed then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid:GetState() == Enum.HumanoidStateType.Dead then task.wait(2); canProceed = false end
            end

            if canProceed then
                local itemsProcessedThisCycle = false
                local isAnyAutoBuyingActive = (Config.AutoBuySeed and seedAutoBuyLoopThread_Kaitun) or
                                      (Config.AutoBuySelectedGear and autoBuySelectedGearThread_Kaitun) or
                                      (Config.AutoBuyHoneyShopItems and autoBuyHoneyShopItemsThread_Kaitun)
                local isAutoSubmittingPollinated = (Config.AutoSubmitPollinatedFruit and autoSubmitPollinatedThread_Kaitun)

                local proximityPlants = getHarvestablePlants_New()
                if Config.AutoCollect and #proximityPlants > 0 then
                    itemsProcessedThisCycle = true
                    for _, plantInstance in ipairs(proximityPlants) do
                        if not (isCollectingActive_New and Config.AutoCollect) then break end
                        if plantInstance and plantInstance.Parent then
                            local proximityPrompt = nil
                            if plantInstance.FindFirstChildWhichIsA then
                                local pp = plantInstance:FindFirstChildWhichIsA("ProximityPrompt", true)
                                if pp and pp:IsA("ProximityPrompt") and pp.Enabled then proximityPrompt = pp end
                            else
                                for _, child in ipairs(plantInstance:GetDescendants()) do
                                    if child:IsA("ProximityPrompt") and child.Enabled then proximityPrompt = child; break end
                                end
                            end
                            if proximityPrompt and proximityPrompt.MaxActivationDistance ~= 1300 then
                                proximityPrompt.MaxActivationDistance = 1300; task.wait(PAUSE_AFTER_PROMPT_MODIFICATION_NEW)
                            end
                        end
                    end
                end

                if CropsCollectRemote and Config.AutoCollect then
                    local abciHarvestables = getabcishavestable_New()
                    if #abciHarvestables > 0 then
                        if not (isAnyAutoBuyingActive or isAutoSubmittingPollinated) then
                             updateActionStatus(string.format("Auto Collect (New): Collecting %d items via remote...", #abciHarvestables))
                        end
                        itemsProcessedThisCycle = true
                        for _, itemToCollect in ipairs(abciHarvestables) do
                            if not (isCollectingActive_New and Config.AutoCollect) then break end
                            if itemToCollect and itemToCollect.Parent then
                                local success, err = pcall(function()
                                    CropsCollectRemote.send({itemToCollect})
                                end)
                                if not success then
                                    warn("Donald.gg (AutoCollectNew): Error sending collect remote for item: " .. tostring(itemToCollect) .. " Error: " .. tostring(err))
                                    updateActionStatus("Auto Collect (New): Remote Error!")
                                end
                            end
                        end
                    end
                end

                if not itemsProcessedThisCycle then
                    task.wait(1)
                end
            end
            task.wait(COLLECTION_CYCLE_DELAY_NEW)
        end
        isCollectingActive_New = false; collectingLoopThread_New = nil
        if Config.AutoCollect then
            if isEKeyHoldingForCollectActive_New then AutoCollectModule_New.stopEKeyHolding() end
        end
    end)
end

function AutoCollectModule_New.stop()
    if not isCollectingActive_New then return end; isCollectingActive_New = false
    if collectingLoopThread_New then task.cancel(collectingLoopThread_New); collectingLoopThread_New = nil end
    AutoCollectModule_New.stopEKeyHolding()
end

spawn(function()
    while not isLoadingComplete do task.wait(0.1) end
    findFarm()

    while wait(0.5) do
        if not screenGui or not screenGui.Parent then break end
        if math.random(1, 20) == 1 then updateFeatureStatusDisplays_Remake() end

        local isAnyAutoBuyingActive = (Config.AutoBuySeed and seedAutoBuyLoopThread_Kaitun) or
                                      (Config.AutoBuySelectedGear and autoBuySelectedGearThread_Kaitun) or
                                      (Config.AutoBuyHoneyShopItems and autoBuyHoneyShopItemsThread_Kaitun)
        local isAutoSubmittingPollinated = (Config.AutoSubmitPollinatedFruit and autoSubmitPollinatedThread_Kaitun)
        local isAutoSellActive = false
        local currentFruitCount = getFruitCount()
        local sellThreshold = tonumber(Config.SellThreshold) or 50

        if currentFruitCount >= sellThreshold and Config.AutoCollect then
            isAutoSellActive = true
        end

        if not MyFarm or not MyFarm.Parent then
            if not findFarm() then task.wait(5) end
        else
            Character = getCharacter()
            Humanoid = getHumanoid(Character)
            HumanoidRootPart = getHumanoidRootPart(Character)
            if not Character or not Humanoid or not HumanoidRootPart then task.wait(1)
            elseif Humanoid:GetState() == Enum.HumanoidStateType.Dead then task.wait(3)
            else
                local actionTakenThisCycle = false

                if Config.AutoPlant and not actionTakenThisCycle and not isAutoSellActive then
                    local seedTool = checkhasseed_for_trongrau_plant()
                    if seedTool then
                        if plant_original_trongrau(seedTool.Name) then
                            actionTakenThisCycle = true
                        end
                    end
                end

                if Config.AutoDestroy and not actionTakenThisCycle and not isAutoSellActive then
                    local plantToDestroy = findPlantToDestroy()
                    if plantToDestroy then
                        updateActionStatus(string.format("Destroying %s...", plantToDestroy.Name))
                        task.wait(0.8)
                        local shovel = Backpack:FindFirstChild("Shovel [Destroy Plants]") or Character:FindFirstChild("Shovel [Destroy Plants]")
                        if not shovel then updateActionStatus("Destroy Shovel not found!")
                        else
                            if shovel.Parent == Backpack then Humanoid:EquipTool(shovel); task.wait(0.2) end
                            if Character:FindFirstChild(shovel.Name) then
                                local plantPart = plantToDestroy:FindFirstChildOfClass("Part") or plantToDestroy:FindFirstChildOfClass("MeshPart") or plantToDestroy.PrimaryPart
                                if plantPart then
                                    HumanoidRootPart.CFrame = plantPart.CFrame * CFrame.new(0, 3, 0)
                                    task.wait(0.1)
                                    if GameEvents then
                                        local removeItemRemote = GameEvents:FindFirstChild("Remove_Item")
                                        if removeItemRemote and removeItemRemote:IsA("RemoteEvent") then removeItemRemote:FireServer(plantPart)
                                        else warn("Donald.gg Kaitun: Remove_Item RE not found.") end
                                    end
                                    actionTakenThisCycle = true
                                    task.wait(0.5)
                                else updateActionStatus(string.format("Cannot find part for %s", plantToDestroy.Name))
                                end
                            else updateActionStatus("Failed to equip Destroy Shovel.")
                            end
                        end
                    end
                end

                if Config.AutoCollect and not actionTakenThisCycle and not isAnyAutoBuyingActive then
                    if not isCollectingActive_New then
                        AutoCollectModule_New.start()
                    end
                    if currentFruitCount >= sellThreshold then
                        local submittedPollinatedThisSellCycle = false
                        if Config.AutoSubmitPollinatedFruit then
                            local pollinatedTool = findPollinatedToolInBackpack_Kaitun()
                            if pollinatedTool then
                                updateActionStatus("Auto Sell: Pollinated item found, attempting submission before selling...")
                                if performSingleSubmission_Kaitun() then
                                    submittedPollinatedThisSellCycle = true
                                    actionTakenThisCycle = true
                                    task.wait(1.5)
                                else
                                    updateActionStatus("Auto Sell: Failed to submit Pollinated, proceeding to sell inventory.")
                                    task.wait(0.5)
                                end
                            end
                        end

                        if not submittedPollinatedThisSellCycle or (submittedPollinatedThisSellCycle and getFruitCount() >= sellThreshold) then
                            isAutoSellActive = true
                            updateActionStatus(string.format("Auto Sell: Teleporting to sell point... (%d/%d Fruit)", getFruitCount(), sellThreshold))
                            -- Đảm bảo HumanoidRootPart không bị anchored và nhân vật không ngồi
                            if HumanoidRootPart and Humanoid then
                                if HumanoidRootPart.Anchored then HumanoidRootPart.Anchored = false end
                                if Humanoid:GetState() == Enum.HumanoidStateType.Seated then Humanoid.Sit = false end
                                -- Teleport đến vị trí bán
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(86.5900116, 2.99999976, 0.426799476, -0.00339480047, 2.42123388e-08, -0.999994218, -1.41987344e-12, 1, 2.42124845e-08, 0.999994218, 8.36164193e-11, -0.00339480047)
                                task.wait(1) -- Chờ 1 giây để đảm bảo teleport hoàn tất
                                -- Kiểm tra lại vị trí sau khi teleport
                                local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                                local targetPos = Vector3.new(86.5900116, 2.99999976, 0.426799476)
                                if (currentPos - targetPos).Magnitude > 5 then
                                    warn("Donald.gg Kaitun: Teleport failed, retrying...")
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(86.5900116, 2.99999976, 0.426799476, -0.00339480047, 2.42123388e-08, -0.999994218, -1.41987344e-12, 1, 2.42124845e-08, 0.999994218, 8.36164193e-11, -0.00339480047)
                                    task.wait(1)
                                end
                            end
                            updateActionStatus(string.format("Auto Sell: Selling inventory... (%d/%d Fruit)", getFruitCount(), sellThreshold))
                            if GameEvents then
                                local sellInventoryRemote = GameEvents:FindFirstChild("Sell_Inventory")
                                if sellInventoryRemote and sellInventoryRemote:IsA("RemoteEvent") then
                                    sellInventoryRemote:FireServer()
                                else warn("Donald.gg Kaitun: Sell_Inventory RE not found.")
                                end
                            end
                            actionTakenThisCycle = true
                            task.wait(0.5)
                            isAutoSellActive = false
                        end
                    end
                elseif not Config.AutoCollect and isCollectingActive_New then
                    AutoCollectModule_New.stop()
                end

                if not actionTakenThisCycle and not isAnyAutoBuyingActive and not isAutoSubmittingPollinated then
                    local collectStatusText = string.format("Auto Collect: %s (%d/%d Fruit)", Config.AutoCollect and "Active" or "Idle", currentFruitCount, sellThreshold)

                    if Config.AutoBuySeed and seedAutoBuyLoopThread_Kaitun then collectStatusText = "Auto Collect: Paused (Buy Seeds)"
                    elseif Config.AutoBuySelectedGear and autoBuySelectedGearThread_Kaitun then collectStatusText = "Auto Collect: Paused (Buy Gear)"
                    elseif Config.AutoBuyHoneyShopItems and autoBuyHoneyShopItemsThread_Kaitun then collectStatusText = "Auto Collect: Paused (Buy Honey)"
                    elseif Config.AutoSubmitPollinatedFruit and autoSubmitPollinatedThread_Kaitun then collectStatusText = "Auto Collect: Paused (Submit Pollen)"
                    end

                    if collectStatusLabel_BloodUI and collectStatusLabel_BloodUI.Parent then
                        collectStatusLabel_BloodUI.Text = collectStatusText
                    end
                    if sellStatusLabel_BloodUI and sellStatusLabel_BloodUI.Parent then
                        sellStatusLabel_BloodUI.Text = "Auto Sell: Monitoring"
                    end
                end
            end
        end
    end
end)

local function cleanup()
    isLoadingComplete=false
    if seedAutoBuyLoopThread_Kaitun then AutoBuySeedModule_Kaitun.stop(); Config.AutoBuySeed = false end
    if autoBuySelectedGearThread_Kaitun then task.cancel(autoBuySelectedGearThread_Kaitun); autoBuySelectedGearThread_Kaitun=nil; Config.AutoBuySelectedGear = false end
    if autoSubmitPollinatedThread_Kaitun then stopAutoSubmitPollinatedLoop_Kaitun(); Config.AutoSubmitPollinatedFruit = false end
    if autoBuyHoneyShopItemsThread_Kaitun then stopAutoBuyHoneyShopItemsLoop_Kaitun(); Config.AutoBuyHoneyShopItems = false end
    stopAntiAFK_Kaitun(); Config["Anti-AFK"] = false
    if fpsBoostThread then Config["Boost FPS"] = false; stopFPSBoostLoop(); end
    if isCollectingActive_New then AutoCollectModule_New.stop() end
    Config.AutoCollect = false
    Config.AutoPlant = false
    saveConfig_Kaitun()
    if screenGui and screenGui.Parent then screenGui:Destroy() end
    print("Donald.gg Kaitun Script Unloaded.")
end
Players.LocalPlayer.Destroying:Connect(function() print("Donald.gg Kaitun cleaning up (Player Destroying)..."); cleanup() end)
screenGui.Destroying:Connect(function() print("Donald.gg Kaitun UI destroyed, cleaning up..."); cleanup() end)

task.spawn(function()
    while not isLoadingComplete do task.wait(0.1) end
    if Config.AutoCollect and not isCollectingActive_New then
         AutoCollectModule_New.start()
    end
    if Config.AutoPlant then
        print("Initial check: Auto Plant (trongrau logic) is enabled in config.")
    end
    updateFeatureStatusDisplays_Remake()
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local isEggAutoBuyingActive, eggAutoBuyLoopThread = false, nil

local function getEggLocationsModels()
    local modelsData = {}
    local npcsFolder = Workspace:FindFirstChild("NPCS")
    if not npcsFolder then return modelsData end
    local petStandModel = npcsFolder:FindFirstChild("Pet Stand")
    if not petStandModel then return modelsData end
    local eggLocationsContainer = petStandModel:FindFirstChild("EggLocations")
    if not eggLocationsContainer then return modelsData end

    local currentModelIndex = 0
    for _, child in ipairs(eggLocationsContainer:GetChildren()) do
        if child:IsA("Model") then
            currentModelIndex = currentModelIndex + 1
            table.insert(modelsData, {model = child, index = currentModelIndex, name = child.Name})
        end
    end
    return modelsData
end

local buyPetEggEventCache = nil
local function getBuyPetEggEvent()
    if buyPetEggEventCache and buyPetEggEventCache.Parent then return buyPetEggEventCache end
    local gameEvents = ReplicatedStorage:WaitForChild("GameEvents", 10)
    if not gameEvents then print("Donald.gg: GameEvents not found in ReplicatedStorage."); return nil end
    local remote = gameEvents:FindFirstChild("BuyPetEgg")
    if not remote or not remote:IsA("RemoteEvent") then print("Donald.gg: BuyPetEgg RemoteEvent not found."); return nil end
    buyPetEggEventCache = remote
    return remote
end

local function sendBuyEggRequest(eggIndex)
    if type(eggIndex) ~= "number" then return false end
    local event = getBuyPetEggEvent()
    if not event then return false end
    local success, err = pcall(function() event:FireServer(eggIndex) end)
    if not success then print("Donald.gg: Error firing BuyPetEgg:", err); return false end
    return true
end

local AutoBuyEggModule = {}

function AutoBuyEggModule.performEggBuyAction(selectedEggType)
    if not selectedEggType or selectedEggType == "Select Egg Type..." then return end
    local eggModelsData = getEggLocationsModels()
    if #eggModelsData == 0 then
        print("Donald.gg [Egg Buy]: No egg models found to buy from.")
        return
    end

    local purchaseAttempts = 0
    local successfulPurchases = 0
    local errorMessages = {}

    for _, modelData in ipairs(eggModelsData) do
        if modelData.name:sub(1, #selectedEggType) == selectedEggType then
            purchaseAttempts = purchaseAttempts + 1
            if sendBuyEggRequest(modelData.index) then
                successfulPurchases = successfulPurchases + 1
                task.wait(0.15)
            else
                table.insert(errorMessages, string.format("Idx %d ('%s'): Failed", modelData.index, modelData.name))
            end
        end
    end

    if purchaseAttempts > 0 then
        if successfulPurchases == purchaseAttempts then
            print(string.format("Donald.gg [Egg Buy]: Successfully sent %d purchase signal(s) for '%s'.", successfulPurchases, selectedEggType))
        else
            local errStr = #errorMessages > 0 and (" Errors: " .. table.concat(errorMessages, "; ")) or "."
            print(string.format("Donald.gg [Egg Buy]: Sent %d/%d signals for '%s'.%s", successfulPurchases, purchaseAttempts, selectedEggType, errStr))
        end
    else
        print("Donald.gg [Egg Buy]: No matching egg model found for type: " .. selectedEggType)
    end
end

function AutoBuyEggModule.start()
    if isEggAutoBuyingActive then return end
    isEggAutoBuyingActive = true

    if eggAutoBuyLoopThread then task.cancel(eggAutoBuyLoopThread) end
    eggAutoBuyLoopThread = task.spawn(function()
        print("Donald.gg [Egg Buy]: Auto Buy Egg loop started.")
        while isEggAutoBuyingActive and Options.AutoBuyEggToggle.Value do
            local selectedEggBuyTypes = Options.EggTypeBuySelect.Value

            if selectedEggBuyTypes and next(selectedEggBuyTypes) ~= nil then
                for eggType, isSelected in pairs(selectedEggBuyTypes) do
                    if not (isEggAutoBuyingActive and Options.AutoBuyEggToggle.Value) then break end
                    if isSelected then
                        AutoBuyEggModule.performEggBuyAction(eggType)
                        task.wait(0.15)
                    end
                end
            else
                task.wait(10)
            end

            if isEggAutoBuyingActive and Options.AutoBuyEggToggle.Value then
                task.wait(10)
            end
        end
        isEggAutoBuyingActive = false
        eggAutoBuyLoopThread = nil
        if Options.AutoBuyEggToggle.Value then Options.AutoBuyEggToggle:SetValue(false) end
        print("Donald.gg [Egg Buy]: Auto Buy Egg loop stopped.")
    end)
end

function AutoBuyEggModule.stop()
    if not isEggAutoBuyingActive then return end
    isEggAutoBuyingActive = false
    if eggAutoBuyLoopThread then
        task.cancel(eggAutoBuyLoopThread)
        eggAutoBuyLoopThread = nil
    end
    print("Donald.gg [Egg Buy]: Auto Buy Egg loop stopped by user.")
end



-- BẮT ĐẦU PHẦN AUTO SELL PET

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Item")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local function extract_pet_name(tool_name)
    return string.match(tool_name, "^(.-)%s%[.-%]%s%[.-%]$") or tool_name
end

local function is_pet_whitelisted(pet_name)
    local config = getgenv().DonaldConfig
    if not config or not config["Pet"] or not config["Pet"]["Name Pet"] then
        return false -- Nếu không có danh sách whitelist => coi như không whitelist
    end

    for _, allowed in ipairs(config["Pet"]["Name Pet"]) do
        if pet_name == allowed then
            return true
        end
    end
    return false
end

local function get_pet_tools()
    local pets = {}
    for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") and string.find(tool.Name, "%[") then
            local pet_name = extract_pet_name(tool.Name)
            if pet_name then
                table.insert(pets, {tool = tool, name = pet_name})
            end
        end
    end
    return pets
end

local function auto_sell_non_whitelist_pets()
    local pet_tools = get_pet_tools()
    if not pet_tools then return end

    for _, pet in ipairs(pet_tools) do
        if pet and pet.name and pet.tool then
            if not is_pet_whitelisted(pet.name) then
                warn("[AutoSell] Bán pet:", pet.name)
                pet.tool.Parent = Character
                task.wait(0.2)
                SellEvent:FireServer()
                task.wait(0.5)
            else
                print("[AutoSell] Giữ lại pet:", pet.name)
            end
        end
    end
end

task.spawn(function()
    while true do
        auto_sell_non_whitelist_pets()
        task.wait(30)
    end
end)

-- Giữ dòng return như cũ nếu cần trong module
return AutoBuyEggModule
