_G.UserConfig = {
    AppServerIP = "127.0.0.1",
    AppServerPort = 5000,
    UpdateInterval = 1,
    RetryAttempts = 3,
    RetryDelay = 10,
    AutoAcceptTimeout = 10,
    TradeWaitDelay = 2,
    TeleportOffset = 5,
    DefaultPlaceId = "126884695634066",
    TeleportCooldown = 30
}

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local APP_SERVER_URL = "http://" .. _G.UserConfig.AppServerIP .. ":" .. _G.UserConfig.AppServerPort
if string.sub(APP_SERVER_URL, #APP_SERVER_URL) == "/" then 
    APP_SERVER_URL = string.sub(APP_SERVER_URL, 1, #APP_SERVER_URL - 1)
end
local UPDATE_INTERVAL = _G.UserConfig.UpdateInterval
local RETRY_ATTEMPTS = _G.UserConfig.RetryAttempts
local RETRY_DELAY = _G.UserConfig.RetryDelay
local TELEPORT_COOLDOWN = _G.UserConfig.TeleportCooldown
local ACCOUNT_NAME = LocalPlayer.Name
local has_connected_to_app_successfully = false
local last_teleport_time = 0

-- HTTP Request Executor
local http_request_executor = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
if not http_request_executor then
    error("Executor không hỗ trợ HTTP Request API cần thiết.")
end

-- GUI Setup
local status_gui_name = "ScriptStatusGUI_" .. ACCOUNT_NAME
local status_text_name = "OnlineStatusText"
local status_text_label = nil

local function setup_status_gui()
    local existing_gui = PlayerGui:FindFirstChild(status_gui_name)
    if existing_gui then existing_gui:Destroy() end
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = status_gui_name
    ScreenGui.Parent = PlayerGui
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = status_text_name
    TextLabel.Size = UDim2.new(0, 150, 0, 30)
    TextLabel.Position = UDim2.new(1, -160, 0, 10)
    TextLabel.BackgroundColor3 = Color3.new(0, 0, 0)
    TextLabel.BackgroundTransparency = 0.5
    TextLabel.TextColor3 = Color3.new(1, 1, 1)
    TextLabel.TextScaled = true
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = "Script: OFFLINE"
    TextLabel.ZIndex = 10
    TextLabel.Parent = ScreenGui
    status_text_label = TextLabel
end

local function update_status_text(text, color)
    if status_text_label then
        status_text_label.Text = "Script: " .. text
        if color then status_text_label.TextColor3 = color end
    end
end

-- HTTP Request
local function perform_http_request(method, url, headers, body)
    local request_options = { Url = url, Method = method, Headers = headers or {}, Body = body }
    local success, response = pcall(function() return http_request_executor(request_options) end)
    if success and type(response) == "table" and response.StatusCode then
        return true, response.Body, response.StatusCode
    else
        return false, tostring(response), nil
    end
end

local function post_to_app(endpoint, data_table)
    local json_data = HttpService:JSONEncode(data_table)
    local headers = { ["Content-Type"] = "application/json" }
    local success, response_body, status_code = perform_http_request("POST", APP_SERVER_URL .. endpoint, headers, json_data)
    if success and type(response_body) == "string" then
        local decode_success, decoded_data = pcall(HttpService.JSONDecode, HttpService, response_body)
        if decode_success and type(decoded_data) == "table" then
            if decoded_data.status == "success" then
                return true, decoded_data
            else
                return false, decoded_data.error or "Phản hồi lỗi từ server"
            end
        else
            return false, "Lỗi giải mã JSON"
        end
    else
        return false, "Lỗi kết nối: " .. tostring(response_body)
    end
end

-- Auto Accept
local function start_auto_accept_listener()
    local GiftNotification = PlayerGui:WaitForChild("Gift_Notification", _G.UserConfig.AutoAcceptTimeout)
    if not GiftNotification then return end
    local Frame = GiftNotification:WaitForChild("Frame", 5)
    if not Frame then return end
    local function clickAcceptButton(notification_frame)
        local success, acceptButton = pcall(function() return notification_frame.Holder.Frame.Accept end)
        if success and acceptButton and acceptButton:IsA("ImageButton") then
            local absPos = acceptButton.AbsolutePosition
            local absSize = acceptButton.AbsoluteSize
            local clickPos = absPos + (absSize / 2)
            VirtualInputManager:SendMouseButtonEvent(clickPos.X, clickPos.Y, 0, true, game, 0)
            VirtualInputManager:SendMouseButtonEvent(clickPos.X, clickPos.Y, 0, false, game, 0)
        end
    end
    for _, child in pairs(Frame:GetChildren()) do
        if child:IsA("ImageLabel") then clickAcceptButton(child) end
    end
    Frame.ChildAdded:Connect(function(v)
        if v:IsA("ImageLabel") then task.spawn(clickAcceptButton, v) end
    end)
end

-- Send Pet Data
local function sendPetDataToApp()
    local current_pets = {}
    local bags = {LocalPlayer.Backpack}
    if LocalPlayer.Character then table.insert(bags, LocalPlayer.Character) end
    for _, bag in ipairs(bags) do
        for _, item in ipairs(bag:GetChildren()) do
            if item:IsA("Tool") and item:GetAttribute("ItemType") == "Pet" and item:GetAttribute("OWNER") == ACCOUNT_NAME then
                table.insert(current_pets, {
                    name = item.Name,
                    uuid = item:GetAttribute("PET_UUID"),
                    kg = item:GetAttribute("KG") or 0,
                    age = item:GetAttribute("AGE") or 0,
                    owner = ACCOUNT_NAME
                })
            end
        end
    end
    local success, msg = post_to_app("/post_pet_data", { account_name = ACCOUNT_NAME, pets = current_pets })
    if success then print("Đã gửi dữ liệu pet") else print("Gửi pet thất bại: " .. msg) end
end

-- Send Job ID
local function sendJobIdToApp()
    local job_id = game.JobId
    if not job_id or job_id == "" then return false end
    local success, msg = post_to_app("/post_job_id", { account_name = ACCOUNT_NAME, job_id = job_id })
    if success then print("Đã gửi Job ID") else print("Gửi Job ID thất bại: " .. msg) end
    return success
end

-- Teleport
local function teleportToPlayer(target_player_name)
    local targetPlayer = Players:FindFirstChild(target_player_name)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then return false end
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return false end
    LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, _G.UserConfig.TeleportOffset)
    return true
end

-- Give Pet
local function givePet(pet_name, receiver_player_name)
    local petTool = LocalPlayer.Backpack:FindFirstChild(pet_name) or (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(pet_name))
    if not petTool or not petTool:IsA("Tool") or petTool:GetAttribute("ItemType") ~= "Pet" then return false, "Pet không hợp lệ" end
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then humanoid:EquipTool(petTool) end
    task.wait(0.5)
    local receiverPlayer = Players:FindFirstChild(receiver_player_name)
    if not receiverPlayer then return false, "Không tìm thấy người nhận" end
    if not teleportToPlayer(receiver_player_name) then return false, "Teleport thất bại" end
    task.wait(1)
    local PetGiftingService = ReplicatedStorage:WaitForChild("GameEvents", 5):WaitForChild("PetGiftingService", 5)
    if not PetGiftingService then return false, "Không tìm thấy PetGiftingService" end
    local success, msg = pcall(function() PetGiftingService:FireServer("GivePet", receiverPlayer) end)
    return success, success and "Gửi thành công" or "Gửi thất bại: " .. msg
end

-- Join Server by Job ID
local function join_server_by_job_id(job_id)
    if not job_id or job_id == "" then return false end
    local current_time = tick()
    if current_time - last_teleport_time < TELEPORT_COOLDOWN then return false end
    local teleportOptions = Instance.new("TeleportOptions")
    teleportOptions.ServerInstanceId = job_id
    local success, error_msg = pcall(function()
        TeleportService:TeleportPartyAsync(tonumber(_G.UserConfig.DefaultPlaceId), {LocalPlayer}, teleportOptions)
    end)
    if success then last_teleport_time = current_time end
    return success
end

-- Get Config
local function get_config_from_app()
    local url = APP_SERVER_URL .. "/fetch_config"
    local success, response_body, status_code = perform_http_request("POST", url, { ["Content-Type"] = "application/json" }, HttpService:JSONEncode({ account = ACCOUNT_NAME }))
    if success and type(response_body) == "string" then
        local decode_success, data = pcall(HttpService.JSONDecode, HttpService, response_body)
        if decode_success and type(data) == "table" and data.status == "success" and type(data.config) == "table" then
            return data.config
        end
    end
    return nil
end

-- Main Loop
task.spawn(function()
    setup_status_gui()
    update_status_text("Connecting...", Color3.new(1, 1, 0))
    start_auto_accept_listener()

    while true do
        local config = nil
        local current_connection_success = false
        for attempt = 1, has_connected_to_app_successfully and RETRY_ATTEMPTS or 1 do
            config = get_config_from_app()
            if config then
                current_connection_success = true
                has_connected_to_app_successfully = true
                update_status_text("Online", Color3.new(0, 1, 0))
                break
            end
            task.wait(RETRY_DELAY)
        end

        if not current_connection_success then
            if has_connected_to_app_successfully then
                update_status_text("Offline (Kicked)", Color3.new(1, 0, 0))
                LocalPlayer:Kick("App đã bị đóng hoặc mất kết nối.")
                break
            else
                update_status_text("No App Connection", Color3.new(1, 0.5, 0))
            end
        else
            sendPetDataToApp()
            if config.operation_mode == "receive_pet" then
                sendJobIdToApp()
            elseif config.operation_mode == "trade_pet" then
                if config.job_id_to_join and config.job_id_to_join ~= "" then
                    join_server_by_job_id(config.job_id_to_join)
                    task.wait(10)
                end
                if #config.pets_to_trade_for_this_account > 0 then
                    for _, pet_name in ipairs(config.pets_to_trade_for_this_account) do
                        givePet(pet_name, config.receiver_account_name)
                        task.wait(_G.UserConfig.TradeWaitDelay)
                    end
                end
            end
        end
        task.wait(UPDATE_INTERVAL)
    end
end)
